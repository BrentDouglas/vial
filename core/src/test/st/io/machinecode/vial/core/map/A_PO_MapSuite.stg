delimiters "$", "$"

POMapSuite(I, P, p, hc, X) ::= <<
package io.machinecode.vial.core.map;

import com.google.common.collect.testing.MapTestSuiteBuilder;
import com.google.common.collect.testing.features.CollectionFeature;
import com.google.common.collect.testing.features.CollectionSize;
import com.google.common.collect.testing.features.MapFeature;
import io.machinecode.vial.api.Spread;
import io.machinecode.vial.core.Spreads;
import io.machinecode.vial.api.map.$I$OCursor;
import io.machinecode.vial.api.map.$I$OMap;
//import io.machinecode.vial.core.BadHashCode;
import io.machinecode.vial.core.TestUtil;
import io.machinecode.vial.core.VialSuite;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $I$OMapSuite extends VialSuite {

    public interface CreateMap {

        <V> $I$OMap<V> make();

        <V> $I$OMap<V> create();

        <V> $I$OMap<V> create(final int cap);

        <V> $I$OMap<V> create(final float factor);

        <V> $I$OMap<V> create(final int cap, final float factor);

        <V> $I$OMap<V> create(final int cap, final float factor, final Spread spread);

        <V> $I$OMap<V> create(final Map<$P$, V> map);
    }

    public static void createSuite(final TestSuite suite, final Class<?> clazz, final String name, final CreateMap create) {
        suite.addTest(longTestsFor$I$OMap(clazz, name, create));
        suite.addTest(stringTestsFor$I$OMap(clazz, name, create));

        for (final Method method : $I$OMapSuite.class.getDeclaredMethods()) {
            if (method.getName().startsWith("test") && method.getReturnType().equals(void.class)) {
                suite.addTest(new $I$OMapSuite(method.getName(), name, create));
            }
        }
    }

    private static Test longTestsFor$I$OMap(final Class<?> clazz, final String name, final CreateMap create) {
        return MapTestSuiteBuilder
                .using(new $I$LMapGenerator() {
                    @Override
                    protected Map<$P$, Long> create(final Map.Entry<$P$, Long>[] entries) {
                        return TestUtil.populate(create.<Long>make(), entries);
                    }
                })
                .named(clazz.getSimpleName() + "<Long>[" + name + "]")
                .withFeatures(
                        MapFeature.GENERAL_PURPOSE,
                        MapFeature.ALLOWS_NULL_VALUES,
                        MapFeature.ALLOWS_ANY_NULL_QUERIES,
                        CollectionFeature.SUPPORTS_ITERATOR_REMOVE,
                        CollectionFeature.SERIALIZABLE,
                        CollectionSize.ANY)
                .createTestSuite();
    }

    private static Test stringTestsFor$I$OMap(final Class<?> clazz, final String name, final CreateMap create) {
        return MapTestSuiteBuilder
                .using(new $I$OMapGenerator() {
                    @Override
                    protected Map<$P$, String> create(final Map.Entry<$P$, String>[] entries) {
                        return TestUtil.populate(create.<String>make(), entries);
                    }
                })
                .named(clazz.getSimpleName() + "<String>[" + name + "]")
                .withFeatures(
                        MapFeature.GENERAL_PURPOSE,
                        MapFeature.ALLOWS_NULL_VALUES,
                        MapFeature.ALLOWS_ANY_NULL_QUERIES,
                        CollectionFeature.SUPPORTS_ITERATOR_REMOVE,
                        CollectionFeature.SERIALIZABLE,
                        CollectionSize.ANY)
                .createTestSuite();
    }

    static final $p$ _0 = ($p$)0;
    static final $p$ _1 = ($p$)1;
    static final $p$ _2 = ($p$)2;
    static final $p$ _3 = ($p$)3;

    final CreateMap create;

    public $I$OMapSuite(final String method, final String spreadName, final CreateMap create) {
        super(method, spreadName);
        this.create = create;
    }

    private <V> $I$OMap<V> vmap(final $p$ k, final V v) {
        final $I$OMap<V> map = create.make();
        map.put(k, v);
        return map;
    }

    public void testConstructors() {
        final $I$OMap<$P$> a = create.create(4);
        final $I$OMap<$P$> b = create.create(0.5f);
        final $I$OMap<$P$> c = create.create(4, 0.5f);
        final $I$OMap<$P$> d = create.create(4, 0.5f, Spreads.MURMUR3);
        assertEquals(a, b);
        assertEquals(a, c);
        assertEquals(a, d);
        assertEquals(b, c);
        assertEquals(b, d);
        assertEquals(c, d);
        assertTrue(a.isEmpty());
        assertTrue(b.isEmpty());
        assertTrue(c.isEmpty());
        assertTrue(d.isEmpty());
        a.xput(_1, _2);
        a.xput(_2, _3);
        assertEquals(2, a.size());

        final $I$OMap<$P$> e = create.create(a);
        assertEquals(a, e);
        assertEquals(2, e.size());
        assertTrue(e.xcontainsKey(_1));
        assertTrue(e.xcontainsKey(_2));
        assertTrue(e.containsValue(_2));
        assertTrue(e.containsValue(_3));

        final $I$OMap<$P$> f = create.create(new HashMap<$P$,$P$>(){{
            put(_1, _2);
            put(_2, _3);
        }});
        assertEquals(a, f);
        assertEquals(2, f.size());
        assertTrue(f.xcontainsKey(_1));
        assertTrue(f.xcontainsKey(_2));
        assertTrue(f.containsValue(_2));
        assertTrue(f.containsValue(_3));

        final $I$OMap<$P$> g = create.create(); //TODO
    }

    public void testWith() {
        final $I$OMap<$P$> map = create.<$P$>make()
                .with(_1, _2)
                .with(_2, _3)
                .with(_0, null);
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));
        assertTrue(map.containsValue(null));
        assertTrue(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
        assertEquals(3, map.size());
    }

    public void testCapacity() {
        final $I$OMap<$P$> map = create.make();
        map.capacity(50);
        map.capacity(0);
        for (int i = 0; i < 20; ++i) {
            map.put(($p$)i, ($p$)i);
        }
        map.capacity(0);
        map.capacity(30);
        map.capacity(50);
    }

    public void testNullKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertEquals(($P$)_1, map.get(_0));

        assertNotNull(map.putIfAbsent(_0, _2));
        assertEquals(($P$)_1, map.get(_0));

        assertEquals(($P$)_1, map.remove(_0));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));

        assertNull(map.remove(_0));

        assertNull(map.putIfAbsent(_0, _2));
        assertEquals(($P$)_2, map.get(_0));
    }

    public void testNullKeyAndValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(null));
        assertEquals(null, map.get(_0));

        assertNull(map.putIfAbsent(_0, _2));
        assertNull(map.get(_0));

        assertNull(map.remove(_0));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(null));

        assertNull(map.remove(_0));

        assertNull(map.putIfAbsent(_0, _2));
        assertEquals(($P$)_2, map.get(_0));
    }

    public void testNullValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_1, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(null));
        assertNull(map.get(_1));

        assertNull(map.putIfAbsent(_1, _2));
        assertNull(map.get(_1));

        assertNull(map.remove(_1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(null));

        assertNull(map.putIfAbsent(_1, null));
        assertEquals(null, map.get(_1));
    }

    public void testValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_1, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(_1));

        assertNotNull(map.putIfAbsent(_1, _2));
        assertEquals(($P$)_2, map.get(_1));

        assertEquals(($P$)_2, map.remove(_1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(_2));

        assertNull(map.putIfAbsent(_1, _3));
        assertEquals(($P$)_3, map.get(_1));
    }

    public void testPutWithRehash() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(map.containsKey(($p$)i));
            assertTrue(map.containsValue(($p$)i));
            assertEquals(new $P$(($p$)i), map.get(($p$)i));
        }
    }

    public void testPutIfAbsentWithRehash() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.putIfAbsent(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(map.containsKey(($p$)i));
            assertTrue(map.containsValue(($p$)i));
            assertEquals(new $P$(($p$)i), map.get(($p$)i));
        }
    }

    /*
    public void testPutIfAbsentBadHashCode() {
        final $I$OMap<BadHashCode> map = create.make();
        final BadHashCode[] arr = new BadHashCode[10];
        for (int i = 0; i < 10; ++i) {
            assertNull(map.putIfAbsent(arr[i] = new BadHashCode(4), ($p$)i));
        }
        assertEquals(10, map.size());
        for (int i = 0; i < 10; ++i) {
            final BadHashCode bad = arr[i];
            assertTrue(map.containsKey(bad));
            assertTrue(map.containsValue(($p$)i));
            assertEquals(new $P$(($p$)i), map.get(bad));
        }
    }
    */

    public void testClear() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        map.clear();
        assertEquals(0, map.size());
        for (int i = 0; i < 10; ++i) {
            assertFalse(map.containsKey(($p$)i));
            assertFalse(map.containsValue(($p$)i));
            assertNull(map.get(($p$)i));
        }
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
    }

    public void testRemoveNulls() {
        final $I$OMap<$P$> map = create.make();
        assertFalse(map.remove(null, null));
        assertFalse(map.remove(_0, null));
        assertFalse(map.remove(null, _0));
        assertFalse(map.remove(_0, _0));
        assertNull(map.xput(_0, _0));
        assertTrue(map.remove(_0, _0));
    }

    public void testRemoveKey() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(map.containsKey(($p$)i));
            assertTrue(map.containsValue(($p$)i));

            assertEquals(new $P$(($p$)i), map.remove(($p$)i));
            assertNull(map.remove(($p$)i));
        }
        assertEquals(0, map.size());
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
    }

    public void testRemoveKeyNullKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertEquals(1, map.size());

        assertEquals(($P$)_1, map.remove(_0));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertEquals(0, map.size());
    }

    public void testRemoveKeyNullKeyAndValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(null));
        assertEquals(1, map.size());

        assertNull(map.remove(_0));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertEquals(0, map.size());
    }

    public void testRemoveNullKey() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        assertFalse(map.remove(null, _2));
        assertFalse(map.remove(null, null));
        for (int i = 0; i < 10; ++i) {
            assertTrue(map.containsKey(($p$)i));
            assertTrue(map.containsValue(($p$)i));

            assertFalse(map.remove(($p$)i, ($p$)11));
            assertTrue(map.remove(($p$)i, ($p$)i));
            assertFalse(map.remove(($p$)i, ($p$)i));
        }
        assertEquals(0, map.size());
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
    }

    public void testRemoveDefaultKeyNullKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertEquals(1, map.size());

        assertFalse(map.remove(_0, _2));
        assertEquals(1, map.size());
        assertFalse(map.remove(_0, null));
        assertEquals(1, map.size());

        assertTrue(map.remove(_0, _1));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertEquals(0, map.size());
    }

    public void testRemoveKeyDefaultNullKeyAndValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(null));
        assertEquals(1, map.size());


        assertFalse(map.remove(_0, _2));
        assertEquals(1, map.size());

        assertTrue(map.remove(_0, null));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertEquals(0, map.size());
    }

    public void testRemoveValue() {
        final $I$OMap<$P$> map = create.make();
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertEquals(10, map.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(map.containsKey(($p$)i));
            assertTrue(map.containsValue(($p$)i));

            assertTrue(map.xremoveValue(($p$)i));
            assertFalse(map.xremoveValue(($p$)i));
        }
        assertEquals(0, map.size());
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, _0));
        }
        for (int i = 0; i < 9; ++i) {
            assertTrue(map.xremoveValue(_0));
            assertTrue(map.containsValue(_0));
        }
        assertFalse(map.xremoveValue(null));
        assertEquals(1, map.size());

        assertTrue(map.xremoveValue(_0));
        assertFalse(map.containsValue(_0));
        assertEquals(0, map.size());
    }

    public void testRemoveValueNullKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertEquals(1, map.size());

        assertFalse(map.xremoveValue(null));
        assertEquals(1, map.size());

        assertFalse(map.xremoveValue(_2));
        assertEquals(1, map.size());

        assertTrue(map.xremoveValue(_1));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertEquals(0, map.size());
    }

    public void testRemoveValueNullKeyAndValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(null));
        assertEquals(1, map.size());

        assertFalse(map.xremoveValue(_2));
        assertEquals(1, map.size());

        assertTrue(map.xremoveValue(null));
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertEquals(0, map.size());
    }

    public void testReplaceNullKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertEquals(($P$)_1, map.get(_0));

        assertEquals(($P$)_1, map.putIfAbsent(_0, _3));
        assertEquals(($P$)_1, map.get(_0));

        assertFalse(map.replace(_0, null, _3));
        assertEquals(($P$)_1, map.get(_0));

        assertEquals(($P$)_1, map.replace(_0, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_2));
        assertFalse(map.containsValue(_1));
        assertEquals(($P$)_2, map.get(_0));

        assertTrue(map.replace(_0, _2, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(_2));
        assertTrue(map.containsValue(null));
        assertNull(map.get(_1));

        assertTrue(map.replace(_0, null, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_2));
        assertTrue(map.containsValue(_1));
        assertEquals(($P$)_1, map.get(_0));

        assertEquals(($P$)_1, map.remove(_0));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertFalse(map.containsValue(_3));

        assertNull(map.putIfAbsent(_0, _2));
        assertEquals(($P$)_2, map.get(_0));
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertFalse(map.containsValue(_3));
    }

    public void testReplaceNullKeyAndValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(null));
        assertEquals(null, map.get(_0));

        assertNull(map.putIfAbsent(_0, _1));
        assertNull(map.get(_0));

        assertFalse(map.replace(_0, _1, _1));
        assertNull(map.get(_0));

        assertNull(map.replace(_0, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsValue(_1));
        assertFalse(map.containsValue(null));
        assertEquals(($P$)_1, map.get(_0));

        assertTrue(map.replace(_0, _1, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(null));
        assertNull(map.get(_0));

        assertTrue(map.replace(_0, null, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(_0));

        assertEquals(($P$)_2, map.remove(_0));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_1));

        assertNull(map.putIfAbsent(_0, _2));
        assertEquals(($P$)_2, map.get(_0));
        assertTrue(map.containsKey(_0));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
    }

    public void testReplaceNullValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_1, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(null));
        assertNull(map.get(_1));

        assertNull(map.putIfAbsent(_1, _2));
        assertNull(map.get(_1));

        assertFalse(map.replace(_1, _1, _3));
        assertNull(map.get(_1));

        assertNull(map.replace(_1, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(_1));
        assertFalse(map.containsValue(null));
        assertEquals(($P$)_1, map.get(_1));

        assertTrue(map.replace(_1, _1, null));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(null));
        assertNull(map.get(_1));

        assertTrue(map.replace(_1, null, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(_1));

        assertFalse(map.replace(_1, null, null));

        assertEquals(($P$)_2, map.remove(_1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(null));
        assertFalse(map.containsValue(_1));

        assertNull(map.putIfAbsent(_1, null));
        assertEquals(null, map.get(_1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(null));
        assertFalse(map.containsValue(_1));
    }

    public void testReplaceValue() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_1, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(_1));

        assertEquals(($P$)_2, map.putIfAbsent(_1, _3));
        assertEquals(($P$)_2, map.get(_1));

        assertFalse(map.replace(_1, _1, _3));
        assertEquals(($P$)_2, map.get(_1));

        assertEquals(($P$)_2, map.replace(_1, _1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertEquals(($P$)_1, map.get(_1));

        assertTrue(map.replace(_1, _1, _2));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(_1));

        assertEquals(($P$)_2, map.remove(_1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));

        assertNull(map.putIfAbsent(_1, _3));
        assertEquals(($P$)_3, map.get(_1));
        assertEquals(1, map.size());
        assertTrue(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
    }

    public void testReplaceNoKey() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.replace(_1, _1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertNull(map.get(_1));

        assertFalse(map.replace(_1, _1, _2));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_1));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertNull(map.get(_1));

        assertNull(map.replace(_0, _1));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertNull(map.get(_1));

        assertFalse(map.replace(_0, _1, _2));
        assertEquals(0, map.size());
        assertFalse(map.containsKey(_0));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertNull(map.get(_1));
    }

    /*
    public void testReplaceBadHashCode() {
        final $I$OMap<BadHashCode> map = create.make();
        final BadHashCode key = new BadHashCode(4);

        assertNull(map.put(new BadHashCode(4), ($p$)123));
        assertNull(map.put(key, _2));
        assertEquals(2, map.size());
        assertTrue(map.containsKey(key));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(key));

        assertEquals(_2, map.putIfAbsent(key, _3));
        assertEquals(($P$)_2, map.get(key));

        assertFalse(map.replace(key, _1, _3));
        assertEquals(($P$)_2, map.get(key));

        assertEquals(_2, map.replace(key, _1));
        assertEquals(2, map.size());
        assertTrue(map.containsKey(key));
        assertTrue(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertEquals(($P$)_1, map.get(key));

        assertTrue(map.replace(key, _1, _2));
        assertEquals(2, map.size());
        assertTrue(map.containsKey(key));
        assertFalse(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertEquals(($P$)_2, map.get(key));

        assertEquals(($P$)_2, map.remove(key));
        assertEquals(1, map.size());
        assertFalse(map.containsKey(key));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));

        assertNull(map.putIfAbsent(key, _3));
        assertEquals(($P$)_3, map.get(key));
        assertEquals(2, map.size());
        assertTrue(map.containsKey(key));
        assertFalse(map.containsValue(_1));
        assertFalse(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
    }
    */

    public void testGetOrDefault() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.getOrDefault(null, null));
        assertNull(map.getOrDefault(_0, null));
        assertEquals(($P$)_1, map.getOrDefault(_0, _1));

        assertNull(map.getOrDefault(_1, null));
        assertEquals(($P$)_2, map.getOrDefault(_1, _2));

        assertNull(map.put(_0, _1));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, null));
        assertEquals(3, map.size());
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));
        assertTrue(map.containsValue(null));
        assertTrue(map.containsValue(_1));
        assertTrue(map.containsValue(_2));

        assertEquals(($P$)_1, map.getOrDefault(_0, null));
        assertEquals(($P$)_2, map.getOrDefault(_1, null));
        assertNull(map.getOrDefault(_2, _3));
    }

    /*
    public void testGetOrDefaultBadHashCode() {
        final $I$OMap<BadHashCode> map = create.make();

        assertNull(map.getOrDefault(_0, null));
        assertEquals(_1, map.getOrDefault(_0, _1));

        assertNull(map.getOrDefault(new BadHashCode(4), null));
        assertEquals(_2, map.getOrDefault(new BadHashCode(4), _2));

        final BadHashCode[] arr = new BadHashCode[10];

        assertNull(map.put(_1, null));
        assertNull(map.put(_2, arr[1] = new BadHashCode(4)));
        assertNull(map.put(_0, arr[2] = new BadHashCode(4)));
        assertEquals(3, map.size());
        assertTrue(map.containsValue(null));
        assertTrue(map.containsValue(arr[1]));
        assertTrue(map.containsValue(arr[2]));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));

        assertNull(map.getOrDefault(_0, arr[1]));
        assertEquals(arr[1], map.getOrDefault(_2], null));
        assertEquals(arr[2], map.getOrDefault(_0, arr[1]));
    }
    */

    public void testPutAll() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, _3));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));
        assertTrue(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
        assertEquals(3, map.size());

        final HashMap<$P$,$P$> jmap = new HashMap<$P$,$P$>(){{
            assertNull(put(_0, _1));
            assertNull(put(_1, _2));
            assertNull(put(_2, _3));
        }};

        final $I$OMap<$P$> a = create.make();
        a.putAll(map);

        final $I$OMap<$P$> b = create.make();
        b.putAll(jmap);

        assertEquals(map, jmap);
        assertEquals(a, map);
        assertEquals(b, jmap);
        assertEquals(a, b);

        final Map<$P$,$P$> big = new HashMap<>();
        for (int i = 0; i < 8; ++i) {
            big.put(($p$)i, ($p$)i);
        }
        final $I$OMap<$P$> c = create.make();
        c.putAll(new HashMap<$P$, $P$>());
        c.putAll(big);

        for (int i = 0; i < 64; ++i) {
            big.put(($p$)i, ($p$)i);
        }
        final $I$OMap<$P$> d = create.make();
        d.putAll(big);
    }

    public void testKeySetRemove() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, _3));

        final Set<$P$> keys = map.keySet();
        assertFalse(keys.remove(null));
        assertFalse(keys.remove(new Object()));

        assertTrue(keys.remove(_2));
        assertFalse(keys.remove(_2));

        assertTrue(keys.remove(_1));
        assertFalse(keys.remove(_1));

        assertTrue(keys.remove(_0));
        assertFalse(keys.remove(_0));
    }

    public void testValuesHashCode() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, _3));

        final Collection<$P$> vals = map.values();
        vals.hashCode(); //Just testing it can handle having null in it
    }

    public void testToArray() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, _3));
        assertNull(map.put(_3, null));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));
        assertTrue(map.containsKey(_3));
        assertTrue(map.containsValue(null));
        assertTrue(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
        assertEquals(4, map.size());

        {
            final Object[] array = map.keySet().toArray();
            assertTrue(TestUtil.arrayContains(array, _0));
            assertTrue(TestUtil.arrayContains(array, _1));
            assertTrue(TestUtil.arrayContains(array, _2));
            assertTrue(TestUtil.arrayContains(array, _3));
            assertEquals(4, array.length);
        }
        {
            final Object[] array = map.values().toArray();
            assertTrue(TestUtil.arrayContains(array, null));
            assertTrue(TestUtil.arrayContains(array, _1));
            assertTrue(TestUtil.arrayContains(array, _2));
            assertTrue(TestUtil.arrayContains(array, _3));
            assertEquals(4, array.length);
        }
    }

    public void testToArrayT() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, _1));
        assertNull(map.put(_1, _2));
        assertNull(map.put(_2, _3));
        assertNull(map.put(_3, null));
        assertTrue(map.containsKey(_0));
        assertTrue(map.containsKey(_1));
        assertTrue(map.containsKey(_2));
        assertTrue(map.containsKey(_3));
        assertTrue(map.containsValue(null));
        assertTrue(map.containsValue(_1));
        assertTrue(map.containsValue(_2));
        assertTrue(map.containsValue(_3));
        assertEquals(4, map.size());

        {
            final $P$[] array = map.keySet().toArray(new $P$[4]);
            assertTrue(TestUtil.arrayContains(array, _0));
            assertTrue(TestUtil.arrayContains(array, _1));
            assertTrue(TestUtil.arrayContains(array, _2));
            assertTrue(TestUtil.arrayContains(array, _3));
            assertEquals(4, array.length);
        }
        {
            final $P$[] array = map.values().toArray(new $P$[4]);
            assertTrue(TestUtil.arrayContains(array, null));
            assertTrue(TestUtil.arrayContains(array, _1));
            assertTrue(TestUtil.arrayContains(array, _2));
            assertTrue(TestUtil.arrayContains(array, _3));
            assertEquals(4, array.length);
        }
    }

    public void testCursor() {
        final $I$OMap<$P$> map = create.make();

        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, ($p$)i));
        }
        assertNull(map.put(($p$)10, null));

        final $I$OCursor<$P$> c = map.iterator();
        assertTrue(c.hasNext());
        for (final $I$OCursor<$P$> x : map) {
            assertNotNull(c.next());
            assertEquals(x, c);
            assertNotSame(x, c);
            assertEquals(x.key(), c.key());
            assertEquals(x.value(), c.value());
            assertEquals(x.toString(), c.toString());
        }
        assertFalse(c.hasNext());

        c.before();
        int i = 0;
        for (final $I$OCursor<$P$> x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(($p$)11, i);

        c.before();
        c.next();
        assertFalse(c.equals(null));
        assertFalse(c.equals(new Object()));
    }

    public void testCursorBefore() {
        final $I$OMap<$P$> map = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertNull(map.put(i, _0));
        }

        final $I$OCursor<$P$> c = map.iterator();
        assertTrue(c.hasNext());
        for (final $I$OCursor<$P$> x : c) {
            assertNotNull(c.next());
            assertEquals(x.value(), c.value());
        }
        assertFalse(c.hasNext());

        c.before();
        int i = 0;
        for (final $I$OCursor<$P$> x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(10, i);
    }

    public void testCursorAfter() {
        final $I$OMap<$P$> map = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertNull(map.put(i, _0));
        }

        final $I$OCursor<$P$> c = map.iterator();
        assertTrue(c.hasNext());
        c.after();
        assertFalse(c.hasNext());
    }

    public void testCursorIndex() {
        final $I$OMap<$P$> map = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertNull(map.put(i, _0));
        }

        final $I$OCursor<$P$> c = map.iterator();
        assertTrue(c.hasNext());
        for (final $I$OCursor<$P$> x : c) {
            assertNotNull(c.next());
            assertEquals(x.value(), c.value());
        }
        assertFalse(c.hasNext());

        c.index(0);

        int i = 0;
        for (final $I$OCursor<$P$> x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(10, i);

        c.index(0);
        assertTrue(c.hasNext());
        c.index(9).next();
        assertFalse(c.hasNext());
    }

    public void testCursorIndexTooLow() {
        final $I$OMap<$P$> map = create.make();
        final $I$OCursor<$P$> c = map.iterator();
        try {
            c.index(-1);
            fail();
        } catch(final IndexOutOfBoundsException e) {}
    }

    public void testIteratorIndexTooHigh() {
        final $I$OMap<$P$> map = create.make();

        for ($p$ i = 0; i < 6; ++i) {
            assertNull(map.put(i, _0));
        }

        final $I$OCursor<$P$> c = map.iterator();
        try {
            c.index(6);
            fail();
        } catch(final IndexOutOfBoundsException e) {}
    }

    public void testCursorEquals() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertTrue(map.iterator().next().equals(new Cur(_0, null)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_1, null)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
        map.clear();
        assertNull(map.put(_0, _1));
        assertFalse(map.iterator().next().equals(new Cur(_0, null)));
        assertTrue(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_1, null)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
        map.clear();
        assertNull(map.put(_1, _1));
        assertFalse(map.iterator().next().equals(new Cur(_0, null)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_1, null)));
        assertTrue(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
        map.clear();
        assertNull(map.put(_1, null));
        assertFalse(map.iterator().next().equals(new Cur(_0, null)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertTrue(map.iterator().next().equals(new Cur(_1, null)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
        map.clear();
        assertNull(map.put(_0, _1));
        assertFalse(map.iterator().next().equals(new Cur(_0, null)));
        assertTrue(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_1, null)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
        map.clear();
        assertNull(map.put(_0, null));
        assertTrue(map.iterator().next().equals(new Cur(_0, null)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_0, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_1, null)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_1, _2)));
        assertFalse(map.iterator().next().equals(new Cur(_2, null)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _1)));
        assertFalse(map.iterator().next().equals(new Cur(_2, _2)));
    }

    /*
    public void testCursorRemove() {
        final $I$OMap<BadHashCode> map = create.make();
        final BadHashCode[] arr = new BadHashCode[10];
        for (int i = 0; i < 10; ++i) {
            assertNull(map.put(($p$)i, arr[i] = new BadHashCode(4)));
        }
        assertEquals(10, map.size());

        int i = 10;
        for (final $I$OCursor<BadHashCode> x : map) {
            assertEquals(i--, map.size());
            x.remove();
            assertEquals(i, map.size());
        }
        assertEquals(0, map.size());
    }
    */

    /*
     * The map has 8 elements and can insert 5 before it expands.
     * We're inserting 5 elements with hc 5 which should wrap the
     * last two in the backing array and trigger a
     * copy when removing the element.
     *
     * 55xxx555
     *      ^ remove this one
     */
    /*
    public void testCursorRemoveCopyWrap() {
        final $I$OMap<BadHashCode> map = create.make();
        for (int i = 0; i < 5; ++i) {
            assertNull(map.put(new BadHashCode(5), ($p$)i));
        }
        assertEquals(5, map.size());

        final $I$OCursor<BadHashCode> it = map.iterator();
        it.next().next();
        for (final $I$OCursor<BadHashCode> x : it) {
            x.remove();
        }
    }
    */

    public void testEntrySetContains() {
        final $I$OMap<$P$> map = create.make();
        assertNull(map.put(_0, null));
        assertTrue(map.entrySet().contains(new En<>(map, _0, null)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, null)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, null, null)));
        map.clear();
        assertNull(map.put(_0, _1));
        assertFalse(map.entrySet().contains(new En<>(map, null, null)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _2)));
        assertTrue(map.entrySet().contains(new En<>(map, _0, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, null)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, _1)));
        map.clear();
        assertNull(map.put(_1, null));
        assertFalse(map.entrySet().contains(new En<>(map, null, null)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _2)));
        assertTrue(map.entrySet().contains(new En<>(map, _1, null)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, _2, null)));
        assertFalse(map.entrySet().contains(new En<>(map, _2, _1)));
        map.clear();
        assertNull(map.put(_1, _1));
        assertFalse(map.entrySet().contains(new En<>(map, null, null)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, null, _2)));
        assertFalse(map.entrySet().contains(new En<>(map, _1, null)));
        assertTrue(map.entrySet().contains(new En<>(map, _1, _1)));
        assertFalse(map.entrySet().contains(new En<>(map, _2, null)));
        assertFalse(map.entrySet().contains(new En<>(map, _2, _1)));
    }

    public void testEqualsNullKey() {
        final $I$OMap<$P$> map = vmap(_0, _1);
        assertFalse(map.equals(jmap(null, null)));
        assertFalse(map.equals(jmap(null,_1)));
        assertFalse(map.equals(jmap(_0,null)));
        assertTrue(map.equals(jmap(_0,_1)));
        assertFalse(map.equals(jmap(_1,null)));
        assertFalse(map.equals(jmap(_1,_1)));
        assertFalse(map.equals(jmap(_1,_2)));
        assertFalse(map.equals(jmap(_2,_2)));
    }

    public void testEqualsNullValue() {
        final $I$OMap<$P$> map = vmap(_1, null);
        assertFalse(map.equals(jmap(null, null)));
        assertFalse(map.equals(jmap(null,_1)));
        assertFalse(map.equals(jmap(_0,null)));
        assertFalse(map.equals(jmap(_0,_1)));
        assertTrue(map.equals(jmap(_1,null)));
        assertFalse(map.equals(jmap(_1,_1)));
        assertFalse(map.equals(jmap(_1,_2)));
        assertFalse(map.equals(jmap(_2,_2)));
    }

    public void testEqualsNullKeyValue() {
        final $I$OMap<$P$> map = vmap(_0, _0);
        assertFalse(map.equals(jmap(null, null)));
        assertFalse(map.equals(jmap(null,_1)));
        assertFalse(map.equals(jmap(_0,null)));
        assertFalse(map.equals(jmap(_0,_1)));
        assertFalse(map.equals(jmap(_1,null)));
        assertFalse(map.equals(jmap(_1,_1)));
        assertFalse(map.equals(jmap(_1,_2)));
        assertFalse(map.equals(jmap(_2,_2)));
    }

    public void testEqualsKeyValue() {
        final $I$OMap<$P$> map = vmap(_1, _1);
        assertFalse(map.equals(jmap(null, null)));
        assertFalse(map.equals(jmap(null,_1)));
        assertFalse(map.equals(jmap(_0,null)));
        assertFalse(map.equals(jmap(_0,_1)));
        assertFalse(map.equals(jmap(_1,null)));
        assertTrue(map.equals(jmap(_1,_1)));
        assertFalse(map.equals(jmap(_1,_2)));
        assertFalse(map.equals(jmap(_2,_2)));
    }

    public static class Cur implements $I$OCursor<$P$> {

        final $p$ k;
        final $P$ v;

        private Cur(final $p$ k, final $P$ v) {
            this.k = k;
            this.v = v;
        }

        @Override
        public $p$ key() {
            return k;
        }

        @Override
        public $P$ value() {
            return v;
        }

        @Override
        public Cur before() { return this; }

        @Override
        public Cur after() { return this; }

        @Override
        public Cur index(final int index) { return this; }

        @Override
        public Iterator<$I$OCursor<$P$$X$ iterator() {
            return null;
        }

        @Override
        public boolean hasNext() {
            return false;
        }

        @Override
        public $I$OCursor<$P$> next() {
            return this;
        }

        @Override
        public void remove() {}
    }
}

>>