delimiters "$", "$"

PPHashMapSuite(Ik, Pk, pk, Iv, Pv, pv, hc, X) ::= <<
package io.machinecode.vial.core.map;

import com.google.common.collect.testing.MapTestSuiteBuilder;
import com.google.common.collect.testing.features.CollectionFeature;
import com.google.common.collect.testing.features.CollectionSize;
import com.google.common.collect.testing.features.MapFeature;
import io.machinecode.vial.core.TestUtil;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.util.Map;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $Ik$$Iv$HashMapSuite {

    public interface CreateMap {

        Map<$Pk$, $Pv$> create();
    }

    public static void createSuite(final TestSuite suite, final String name, final CreateMap create) {
        suite.addTest(testsFor$Ik$$Iv$HashMapF(name, create));
    }

    private static Test testsFor$Ik$$Iv$HashMapF(final String name, final CreateMap create) {
        return MapTestSuiteBuilder
                .using(new $Ik$$Iv$MapGenerator() {
                    @Override
                    protected Map<$Pk$, $Pv$> create(final Map.Entry<$Pk$,$Pv$>[] entries) {
                        return TestUtil.populate(create.create(), entries);
                    }
                })
                .named("$Ik$$Iv$HashMapF[" + name + "]")
                .withFeatures(
                        MapFeature.GENERAL_PURPOSE,
                        MapFeature.ALLOWS_ANY_NULL_QUERIES,
                        CollectionFeature.SERIALIZABLE,
                        CollectionFeature.SUPPORTS_ITERATOR_REMOVE,
                        CollectionSize.ANY)
                .createTestSuite();
    }
}
>>