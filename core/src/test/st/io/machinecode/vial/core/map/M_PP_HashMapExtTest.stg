delimiters "$", "$"

PPHashMapExtTest(I, P, p, hc, X) ::= <<
package io.machinecode.vial.core.map;

import io.machinecode.vial.api.Spread;
import io.machinecode.vial.api.map.$I$$I$Map;

import java.util.HashMap;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $I$$I$HashMapExtTest extends $I$$I$HashMapFExtTest {

    @Override
    protected $I$$I$Map create(final float factor) {
        return new $I$$I$HashMap(factor);
    }

    @Override
    protected $I$$I$Map create() {
        return new $I$$I$HashMap();
    }

    @Override
    protected void doTestConstructors() {
        final $I$$I$HashMap a = new $I$$I$HashMap(4);
        final $I$$I$HashMap b = new $I$$I$HashMap(0.5f);
        final $I$$I$HashMap c = new $I$$I$HashMap(4, 0.5f);
        final $I$$I$HashMap d = new $I$$I$HashMap(4, 0.5f, Spread.MURMUR3);
        assertEquals(a, b);
        assertEquals(a, c);
        assertEquals(a, d);
        assertEquals(b, c);
        assertEquals(b, d);
        assertEquals(c, d);
        assertTrue(a.isEmpty());
        assertTrue(b.isEmpty());
        assertTrue(c.isEmpty());
        assertTrue(d.isEmpty());
        a.xput(k_1, v_2);
        a.xput(k_2, v_3);
        assertEquals(2, a.size());

        final $I$$I$HashMap e = new $I$$I$HashMap(a);
        assertEquals(a, e);
        assertEquals(2, e.size());
        assertTrue(e.xcontainsKey(k_1));
        assertTrue(e.xcontainsKey(k_2));
        assertTrue(e.xcontainsValue(v_2));
        assertTrue(e.xcontainsValue(v_3));


        final $I$$I$HashMap f = new $I$$I$HashMap(new HashMap<$P$,$P$>(){{
            put(k_1, v_2);
            put(k_2, v_3);
        }});
        assertEquals(a, f);
        assertEquals(2, f.size());
        assertTrue(f.xcontainsKey(k_1));
        assertTrue(f.xcontainsKey(k_2));
        assertTrue(f.xcontainsValue(v_2));
        assertTrue(f.xcontainsValue(v_3));
    }
}
>>