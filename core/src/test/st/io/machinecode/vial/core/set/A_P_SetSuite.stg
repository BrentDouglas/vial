delimiters "$", "$"

PSetSuite(I, P, p, hck, hcv, X) ::= <<
package io.machinecode.vial.core.set;

import com.google.common.collect.testing.SetTestSuiteBuilder;
import com.google.common.collect.testing.features.CollectionFeature;
import com.google.common.collect.testing.features.CollectionSize;
import com.google.common.collect.testing.features.SetFeature;
import io.machinecode.vial.api.Spread;
import io.machinecode.vial.core.Spreads;
import io.machinecode.vial.api.$I$Cursor;
import io.machinecode.vial.api.set.$I$Set;
import io.machinecode.vial.core.TestUtil;
import io.machinecode.vial.core.VialSuite;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $I$SetSuite extends VialSuite {

    public interface CreateSet {

        $I$Set make();

        $I$Set create();

        $I$Set create(final int cap);

        $I$Set create(final float factor);

        $I$Set create(final int cap, final float factor);

        $I$Set create(final int cap, final float factor, final Spread spread);

        $I$Set create(final $p$[] set);

        $I$Set create(final Collection<$P$> set);
    }

    public static void createSuite(final TestSuite suite, final Class<?> clazz, final String name, final CreateSet create) {
        suite.addTest(testsFor$I$Set(clazz, name, create));
        for (final Method method : $I$SetSuite.class.getDeclaredMethods()) {
            if (method.getName().startsWith("test") && method.getReturnType().equals(void.class)) {
                suite.addTest(new $I$SetSuite(method.getName(), name, create));
            }
        }
    }

    private static Test testsFor$I$Set(final Class<?> clazz, final String name, final CreateSet create) {
        return SetTestSuiteBuilder
                .using(new $I$SetGenerator() {
                    @Override
                    public Set<$P$> create(final Object[] elements) {
                        return TestUtil.populate(create.<$P$>make(), elements);
                    }
                })
                .named(clazz.getSimpleName() + "[" + name + "]")
                .withFeatures(
                        SetFeature.GENERAL_PURPOSE,
                        CollectionFeature.SERIALIZABLE,
                        CollectionSize.ANY)
                .createTestSuite();
    }
    
    static final $p$ _0 = ($p$)0;
    static final $p$ _1 = ($p$)1;
    static final $p$ _2 = ($p$)2;
    static final $p$ _3 = ($p$)3;
    static final $p$ _4 = ($p$)4;

    final CreateSet create;

    public $I$SetSuite(final String method, final String spreadName, final CreateSet create) {
        super(method, spreadName);
        this.create = create;
    }

    protected $I$Set vset(final $P$... vs) {
        final $I$Set that = create.make();
        Collections.addAll(that, vs);
        return that;
    }

    protected Set<$P$> jset(final $P$... vs) {
        final Set<$P$> that = new HashSet<>();
        Collections.addAll(that, vs);
        return that;
    }

    public void testConstructors() {
        final $I$Set a = create.create(4);
        final $I$Set b = create.create(0.5f);
        final $I$Set c = create.create(4, 0.5f);
        final $I$Set d = create.create(4, 0.5f, Spreads.MURMUR3);
        assertEquals(a, b);
        assertEquals(a, c);
        assertEquals(a, d);
        assertEquals(b, c);
        assertEquals(b, d);
        assertEquals(c, d);
        assertTrue(a.isEmpty());
        assertTrue(b.isEmpty());
        assertTrue(c.isEmpty());
        assertTrue(d.isEmpty());
        a.xadd(_0);
        a.xadd(_1);
        a.xadd(_2);
        assertEquals(3, a.size());
        b.xadd(_0);
        b.xadd(_1);
        b.xadd(_2);
        assertEquals(3, a.size());

        final $I$Set e = create.create(a);
        assertEquals(a, e);
        assertEquals(3, e.size());
        assertTrue(e.contains(_0));
        assertTrue(e.contains(_1));
        assertTrue(e.contains(_2));

        final $I$Set f = create.create(new $p$[]{_0, _2, _1});
        assertEquals(a, f);
        assertEquals(3, f.size());
        assertTrue(f.xcontains(_0));
        assertTrue(f.xcontains(_1));
        assertTrue(f.xcontains(_2));

        final $I$Set g = create.create(b);
        assertEquals(b, g);
        assertEquals(3, g.size());
        assertTrue(g.xcontains(_0));
        assertTrue(g.xcontains(_1));
        assertTrue(g.xcontains(_2));

        final $I$Set h = create.create(new HashSet<$P$>(){{
            add(_0);
            add(_1);
            add(_2);
        }});
        assertEquals(b, h);
        assertEquals(3, h.size());
        assertTrue(h.xcontains(_0));
        assertTrue(h.xcontains(_1));
        assertTrue(h.xcontains(_2));

        final $I$Set i = create.create(); //TODO
    }

    public void testWith() {
        final $I$Set set = create.make()
                .with(_1)
                .with(_2);
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertEquals(2, set.size());
    }

    public void testCapacity() {
        final $I$Set set = create.make();
        set.capacity(50);
        set.capacity(0);
        for (int i = 0; i < 20; ++i) {
            set.add(($p$)i);
        }
        set.capacity(0);
        set.capacity(30);
        set.capacity(50);
    }

    public void testNull() {
        try {
            final $I$Set set = create.make();
            set.add(null);
            fail();
        } catch (final NullPointerException e){}
    }

    public void testValue() {
        final $I$Set set = create.make();
        assertTrue(set.add(_1));
        assertEquals(1, set.size());
        assertTrue(set.contains(_1));

        assertTrue(set.remove(_1));
        assertEquals(0, set.size());
        assertFalse(set.contains(_1));
    }

    public void testAddWithRehash() {
        final $I$Set set = create.make();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.contains(i));
        }
    }

    public void testClear() {
        final $I$Set set = create.make();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        set.clear();
        assertEquals(0, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertFalse(set.contains(i));
        }
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
    }

    public void testRemoveValue() {
        final $I$Set set = create.make();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.contains(i));

            assertTrue(set.remove(i));
            assertFalse(set.remove(i));
        }
        assertEquals(0, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
    }

    /*
    public void testRemoveBadHashCode() {
        final $I$Set set = create.make();
        final $p$[] arr = new $p$[10];
        for (int i = 0; i < 10; ++i) {
            assertTrue(set.add(arr[i] = 4));
        }
        assertEquals(10, set.size());
        //This will make sure removed keys need moving
        for (int i = 0; i < 5; ++i) {
            assertTrue(set.contains(arr[i]));

            assertTrue(set.remove(arr[i]));
            assertFalse(set.remove(arr[i]));
        }
        //This will make it skip keys before removing them
        for (int i = 9; i > 4; --i) {
            assertTrue(set.contains(arr[i]));

            assertTrue(set.remove(arr[i]));
            assertFalse(set.remove(arr[i]));
        }
        assertEquals(0, set.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(set.add(arr[i]));
        }
    }
    */

    public void testXRetainAllNull() {
        final $I$Set set = create.make();
        try {
            set.xretainAll(null);
            fail();
        } catch (final NullPointerException e) {}
    }

    public void testRetainAllValue() {
        final $I$Set set = create.make();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertEquals(3, set.size());

        assertTrue(set.xretainAll(_1, _2));
        assertFalse(set.contains(null));
        assertFalse(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertEquals(2, set.size());

        assertTrue(set.xretainAll(_1, _3));
        assertFalse(set.contains(null));
        assertFalse(set.contains(_0));
        assertTrue(set.contains(_1));
        assertFalse(set.contains(_2));
        assertEquals(1, set.size());
    }

    public void testRemoveAll() {
        final $I$Set set = create.make();
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(3, set.size());

        assertTrue(set.xremoveAll(_3, _2));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_1));
        assertFalse(set.contains(_2));
        assertFalse(set.contains(_3));
        assertEquals(1, set.size());
    }

    public void testContainsAll() {
        final $I$Set set = create.make();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());

        assertTrue(set.xcontainsAll(_0, _1, _2, _3));
        assertTrue(set.xcontainsAll(_0, _1, _2));
        assertTrue(set.xcontainsAll(_0, _1, _3));
        assertTrue(set.xcontainsAll(_0, _2, _3));
        assertTrue(set.xcontainsAll(_1, _2, _3));
        assertTrue(set.xcontainsAll(_0, _1));
        assertTrue(set.xcontainsAll(_0, _2));
        assertTrue(set.xcontainsAll(_0, _3));
        assertTrue(set.xcontainsAll(_1, _2));
        assertTrue(set.xcontainsAll(_1, _3));
        assertTrue(set.xcontainsAll(_2, _3));
        assertTrue(set.xcontainsAll(_0));
        assertTrue(set.xcontainsAll(_1));
        assertTrue(set.xcontainsAll(_2));
        assertTrue(set.xcontainsAll(_3));

        assertFalse(set.xcontainsAll(_0, _1, _2, _3, _4));
        assertFalse(set.xcontainsAll(_0, _1, _2, _4));
        assertFalse(set.xcontainsAll(_1, _2, _3, _4));
        assertFalse(set.xcontainsAll(_1, _2, _4));
        assertFalse(set.xcontainsAll(_0, _4));
        assertFalse(set.xcontainsAll(_4));
    }

    public void testAddAll() {
        final $I$Set set = create.create();
        set.addAll(new HashSet<$P$>());

        final Set<$P$> jset = new HashSet<>();
        for (int i = 0; i < 8; ++i) {
            jset.add(($p$)i);
        }
        set.addAll(jset);
        for (int i = 0; i < 20; ++i) {
            jset.add(($p$)i);
        }
        set.addAll(jset);
    }

    public void testCursorBefore() {
        final $I$Set set = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }

        final $I$Cursor c = set.cursor();
        assertTrue(c.hasNext());
        for (final $p$ x : set) {
            assertNotNull(c.next());
            assertEquals(x, c.value());
        }
        assertFalse(c.hasNext());

        c.before();
        int i = 0;
        for (final $I$Cursor x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(10, i);
    }

    public void testCursorAfter() {
        final $I$Set set = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }

        final $I$Cursor c = set.cursor();
        assertTrue(c.hasNext());
        c.after();
        assertFalse(c.hasNext());
    }

    public void testCursorIndex() {
        final $I$Set set = create.make();

        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }

        final $I$Cursor c = set.cursor();
        assertTrue(c.hasNext());
        for (final $p$ x : set) {
            assertNotNull(c.next());
            assertEquals(x, c.value());
        }
        assertFalse(c.hasNext());

        c.index(0);

        int i = 0;
        for (final $I$Cursor x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(10, i);

        c.index(0);
        assertTrue(c.hasNext());
        c.index(9).next();
        assertFalse(c.hasNext());
    }

    public void testCursorIndexTooLow() {
        final $I$Set set = create.make();
        final $I$Cursor c = set.cursor();
        try {
            c.index(-1);
            fail();
        } catch(final IndexOutOfBoundsException e) {}
    }

    public void testIteratorIndexTooHigh() {
        final $I$Set set = create.make();

        for ($p$ i = 0; i < 6; ++i) {
            assertTrue(set.add(i));
        }

        final $I$Cursor c = set.cursor();
        try {
            c.index(6);
            fail();
        } catch(final IndexOutOfBoundsException e) {}
    }

    public void testToArray() {
        final $I$Set set = create.make();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());
        
        final Object[] array = set.toArray();
        assertFalse(TestUtil.arrayContains(array, null));
        assertTrue(TestUtil.arrayContains(array, _0));
        assertTrue(TestUtil.arrayContains(array, _1));
        assertTrue(TestUtil.arrayContains(array, _2));
        assertTrue(TestUtil.arrayContains(array, _3));
        assertEquals(4, array.length);
    }

    public void testToArrayT() {
        final $I$Set set = create.make();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());

        final $P$[] array = set.toArray(new $P$[4]);
        assertFalse(TestUtil.arrayContains(array, null));
        assertTrue(TestUtil.arrayContains(array, _0));
        assertTrue(TestUtil.arrayContains(array, _1));
        assertTrue(TestUtil.arrayContains(array, _2));
        assertTrue(TestUtil.arrayContains(array, _3));
        assertEquals(4, array.length);
    }

    /*
     * The set has 8 elements and can insert 5 before it expands.
     * We're inserting 5 elements with hc 5 which should wrap the
     * last two in the backing array and trigger a
     * copy when removing the element.
     *
     * 55xxx555
     *      ^ remove this one
     */
     /*
    public void testCursorRemoveCopy() {
        final $I$Set set = create.make();
        for (int i = 0; i < 5; ++i) {
            assertTrue(set.add(($p$)5));
        }
        assertEquals(5, set.size());

        final $I$Cursor it = set.cursor();
        it.next().next();
        for (final $I$Cursor x : it) {
            x.remove();
        }
    }
    */

    public void testXAddAll() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertFalse(that.xaddAll(_0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2, _3, _4));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertTrue(that.xaddAll(_1, _2));
            assertEquals(that, jset(_3, _0, _1, _2));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertFalse(that.xaddAll());
            assertEquals(that, jset(_3, _0));
        }
    }

    public void testXAddRange() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertFalse(that.xaddRange(0, 3, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2, _3, _4));
        }
        {
            final $I$Set that = vset(_0, _1, _2);
            assertTrue(that.xaddRange(1, 4, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2, _3));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertFalse(that.xaddRange(0, 0));
            assertEquals(that, jset(_3, _0));
        }
    }

    public void testXAddRangeTooLow() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xaddRange(-1, 3, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXAddRangeTooHigh() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xaddRange(3, 6, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXAddRangeWrongOrder() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xaddRange(3, 2, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRemoveAll() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xremoveAll(_0, _1, _2, _3, _4));
            assertEquals(that, jset());
        }
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xremoveAll(_1, _3));
            assertEquals(that, jset(_0, _2, _4));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertFalse(that.xremoveAll());
            assertEquals(that, jset(_3, _0));
        }
    }

    public void testXRemoveRange() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xremoveRange(0, 3, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_3, _4));
        }
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xremoveRange(2, 4, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _4));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertFalse(that.xremoveRange(0, 0));
            assertEquals(that, jset(_3, _0));
        }
    }

    public void testXRemoveRangeTooLow() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xremoveRange(-1, 3, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRemoveRangeTooHigh() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xremoveRange(0, 6, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRemoveRangeWrongOrder() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xremoveRange(3, 2, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRetainAll() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertFalse(that.xretainAll(_0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2, _3, _4));
        }
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xretainAll(_1, _2));
            assertEquals(that, jset(_1, _2));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertTrue(that.xretainAll());
            assertEquals(that, jset());
        }
    }

    public void testXRetainRange() {
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xretainRange(0, 3, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2));
        }
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertTrue(that.xretainRange(3, 5, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_3, _4));
        }
        {
            final $I$Set that = vset(_3, _0);
            assertTrue(that.xretainRange(0, 0));
            assertEquals(that, jset());
        }
        {
            final $I$Set that = vset(_0, _1, _2, _3, _4);
            assertFalse(that.xretainRange(0, 5, _0, _1, _2, _3, _4));
            assertEquals(that, jset(_0, _1, _2, _3, _4));
        }
    }

    public void testXRetainRangeTooLow() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xretainRange(-1, 3, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRetainRangeTooHigh() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xretainRange(0, 6, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXRetainRangeWrongOrder() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xretainRange(3, 2, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXContainsAll() {
        final $I$Set that = vset(_0, _1, _3, _4);
        assertFalse(that.xcontainsAll(_2, _4));
        assertFalse(that.xcontainsAll(_0, _2));
        assertTrue(that.xcontainsAll(_0, _1, _3, _4));
        assertTrue(that.xcontainsAll(_4));
    }

    public void testXContainsAllRange() {
        final $I$Set that = vset(_0, _1, _3, _4);
        assertFalse(that.xcontainsRange(0, 3, _0, _1, _2, _3, _4));
        assertFalse(that.xcontainsRange(2, 5, _0, _1, _2, _3, _4));
        assertTrue(that.xcontainsRange(0, 2, _0, _1, _2, _3, _4));
        assertTrue(that.xcontainsRange(3, 5, _0, _1, _2, _3, _4));
    }

    public void testXContainsAllRangeTooLow() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xcontainsRange(-1, 3, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXContainsAllRangeTooHigh() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xcontainsRange(0, 6, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }

    public void testXContainsAllRangeWrongOrder() {
        final $I$Set that = vset(_0, _1, _2, _3, _4);
        try {
            that.xcontainsRange(3, 2, _0, _1, _2, _3, _4);
            fail();
        } catch (final IndexOutOfBoundsException e) {}
    }
}
>>