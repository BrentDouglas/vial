delimiters "$", "$"

PPHashMapTest(Ik, Pk, pk, Iv, Pv, pv, hck, hcv, X) ::= <<
package io.machinecode.vial.core.map;

import io.machinecode.vial.api.Spread;
import io.machinecode.vial.api.map.$Ik$$Iv$Map;
import io.machinecode.vial.core.Spreads;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.util.Map;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $Ik$$Iv$HashMapTest {

    public static Test suite() {
        final TestSuite suite = new TestSuite($Ik$$Iv$HashMap.class.getName());
        for (final Spreads spread : Spreads.values()) {
            $Ik$$Iv$MapSuite.createSuite(suite, $Ik$$Iv$HashMap.class, spread.name(), new $Ik$$Iv$MapSuite.CreateMap() {
                @Override
                public $Ik$$Iv$Map make() {
                    return new $Ik$$Iv$HashMap(4, 0.75f, spread);
                }

                @Override
                public $Ik$$Iv$Map create() {
                    return new $Ik$$Iv$HashMap();
                }

                @Override
                public $Ik$$Iv$Map create(final int cap) {
                    return new $Ik$$Iv$HashMap(cap);
                }

                @Override
                public $Ik$$Iv$Map create(final float factor) {
                    return new $Ik$$Iv$HashMap(factor);
                }

                @Override
                public $Ik$$Iv$Map create(final int cap, final float factor) {
                    return new $Ik$$Iv$HashMap(cap, factor);
                }

                @Override
                public $Ik$$Iv$Map create(final int cap, final float factor, final Spread spread) {
                    return new $Ik$$Iv$HashMap(cap, factor, spread);
                }

                @Override
                public $Ik$$Iv$Map create(final Map<$Pk$, $Pv$> map) {
                    return new $Ik$$Iv$HashMap(map);
                }
            });
        }
        return suite;
    }
}
>>