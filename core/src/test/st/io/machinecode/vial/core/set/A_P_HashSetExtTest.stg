delimiters "$", "$"

PHashSetExtTest(I, P, p, hc, X) ::= <<
package io.machinecode.vial.core.set;

import io.machinecode.vial.api.Spread;
import io.machinecode.vial.api.$I$Cursor;
import io.machinecode.vial.api.set.$I$Set;
import io.machinecode.vial.core.TestUtil;
import org.junit.Assert;
import org.junit.Test;

import java.util.HashSet;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $I$HashSetExtTest extends Assert {
    
    static final $p$ _0 = ($p$)0;
    static final $p$ _1 = ($p$)1;
    static final $p$ _2 = ($p$)2;
    static final $p$ _3 = ($p$)3;
    static final $p$ _4 = ($p$)4;

    protected $I$Set create() {
        return new $I$HashSet();
    }

    @Test
    public void testConstructors() {
        final $I$Set a = new $I$HashSet(4);
        final $I$HashSet b = new $I$HashSet(0.5f);
        final $I$HashSet c = new $I$HashSet(4, 0.5f);
        final $I$HashSet d = new $I$HashSet(4, 0.5f, Spread.MURMUR3);
        assertEquals(a, b);
        assertEquals(a, c);
        assertEquals(a, d);
        assertEquals(b, c);
        assertEquals(b, d);
        assertEquals(c, d);
        assertTrue(a.isEmpty());
        assertTrue(b.isEmpty());
        assertTrue(c.isEmpty());
        assertTrue(d.isEmpty());
        a.xadd(_0);
        a.xadd(_1);
        a.xadd(_2);
        assertEquals(3, a.size());
        b.xadd(_0);
        b.xadd(_1);
        b.xadd(_2);
        assertEquals(3, a.size());

        final $I$HashSet e = new $I$HashSet(a);
        assertEquals(a, e);
        assertEquals(3, e.size());
        assertTrue(e.contains(_0));
        assertTrue(e.contains(_1));
        assertTrue(e.contains(_2));

        final $I$HashSet f = new $I$HashSet(new $p$[]{_0, _2, _1});
        assertEquals(a, f);
        assertEquals(3, f.size());
        assertTrue(f.xcontains(_0));
        assertTrue(f.xcontains(_1));
        assertTrue(f.xcontains(_2));

        final $I$HashSet g = new $I$HashSet(b);
        assertEquals(b, g);
        assertEquals(3, g.size());
        assertTrue(g.xcontains(_0));
        assertTrue(g.xcontains(_1));
        assertTrue(g.xcontains(_2));

        final $I$HashSet h = new $I$HashSet(new HashSet<$P$>(){{
            add(_0);
            add(_1);
            add(_2);
        }});
        assertEquals(b, h);
        assertEquals(3, h.size());
        assertTrue(h.xcontains(_0));
        assertTrue(h.xcontains(_1));
        assertTrue(h.xcontains(_2));
    }

    @Test(expected = NullPointerException.class)
    public void testNull() {
        final $I$Set set = create();
        set.add(null);
    }

    @Test
    public void testValue() {
        final $I$Set set = create();
        assertTrue(set.add(_1));
        assertEquals(1, set.size());
        assertTrue(set.contains(_1));

        assertTrue(set.remove(_1));
        assertEquals(0, set.size());
        assertFalse(set.contains(_1));
    }

    @Test
    public void testAddWithRehash() {
        final $I$Set set = create();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.contains(i));
        }
    }

    @Test
    public void testClear() {
        final $I$Set set = create();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        set.clear();
        assertEquals(0, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertFalse(set.contains(i));
        }
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
    }

    @Test
    public void testRemoveValue() {
        final $I$Set set = create();
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
        assertEquals(10, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.contains(i));

            assertTrue(set.remove(i));
            assertFalse(set.remove(i));
        }
        assertEquals(0, set.size());
        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }
    }

    /*
    @Test
    public void testRemoveBadHashCode() {
        final $I$Set set = create();
        final $p$[] arr = new $p$[10];
        for (int i = 0; i < 10; ++i) {
            assertTrue(set.add(arr[i] = 4));
        }
        assertEquals(10, set.size());
        //This will make sure removed keys need moving
        for (int i = 0; i < 5; ++i) {
            assertTrue(set.contains(arr[i]));

            assertTrue(set.remove(arr[i]));
            assertFalse(set.remove(arr[i]));
        }
        //This will make it skip keys before removing them
        for (int i = 9; i > 4; --i) {
            assertTrue(set.contains(arr[i]));

            assertTrue(set.remove(arr[i]));
            assertFalse(set.remove(arr[i]));
        }
        assertEquals(0, set.size());
        for (int i = 0; i < 10; ++i) {
            assertTrue(set.add(arr[i]));
        }
    }
    */

    @Test
    public void testRetainAllValue() {
        final $I$Set set = create();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertEquals(3, set.size());

        assertTrue(set.xretainAll(_1, _2));
        assertFalse(set.contains(null));
        assertFalse(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertEquals(2, set.size());

        assertTrue(set.xretainAll(_1, _3));
        assertFalse(set.contains(null));
        assertFalse(set.contains(_0));
        assertTrue(set.contains(_1));
        assertFalse(set.contains(_2));
        assertEquals(1, set.size());
    }

    @Test
    public void testRemoveAll() {
        final $I$Set set = create();
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(3, set.size());

        assertTrue(set.xremoveAll(_3, _2));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_1));
        assertFalse(set.contains(_2));
        assertFalse(set.contains(_3));
        assertEquals(1, set.size());
    }

    @Test
    public void testContainsAll() {
        final $I$Set set = create();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());

        assertTrue(set.xcontainsAll(_0, _1, _2, _3));
        assertTrue(set.xcontainsAll(_0, _1, _2));
        assertTrue(set.xcontainsAll(_0, _1, _3));
        assertTrue(set.xcontainsAll(_0, _2, _3));
        assertTrue(set.xcontainsAll(_1, _2, _3));
        assertTrue(set.xcontainsAll(_0, _1));
        assertTrue(set.xcontainsAll(_0, _2));
        assertTrue(set.xcontainsAll(_0, _3));
        assertTrue(set.xcontainsAll(_1, _2));
        assertTrue(set.xcontainsAll(_1, _3));
        assertTrue(set.xcontainsAll(_2, _3));
        assertTrue(set.xcontainsAll(_0));
        assertTrue(set.xcontainsAll(_1));
        assertTrue(set.xcontainsAll(_2));
        assertTrue(set.xcontainsAll(_3));

        assertFalse(set.xcontainsAll(_0, _1, _2, _3, _4));
        assertFalse(set.xcontainsAll(_0, _1, _2, _4));
        assertFalse(set.xcontainsAll(_1, _2, _3, _4));
        assertFalse(set.xcontainsAll(_1, _2, _4));
        assertFalse(set.xcontainsAll(_0, _4));
        assertFalse(set.xcontainsAll(_4));
    }

    @Test
    public void testCursor() {
        final $I$Set set = create();

        for ($p$ i = 0; i < 10; ++i) {
            assertTrue(set.add(i));
        }

        final $I$Cursor c = set.cursor();
        assertTrue(c.hasNext());
        for (final $p$ x : set) {
            assertNotNull(c.next());
            assertEquals(x, c.value());
        }
        assertFalse(c.hasNext());

        c.reset();

        int i = 0;
        for (final $I$Cursor x : c) {
            ++i;
            assertSame(x, c);
            assertEquals(x, c);
            assertEquals(x.toString(), c.toString());
        }
        assertEquals(10, i);
    }

    @Test
    public void testToArray() {
        final $I$Set set = create();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());
        
        final Object[] array = set.toArray();
        assertFalse(TestUtil.arrayContains(array, null));
        assertTrue(TestUtil.arrayContains(array, _0));
        assertTrue(TestUtil.arrayContains(array, _1));
        assertTrue(TestUtil.arrayContains(array, _2));
        assertTrue(TestUtil.arrayContains(array, _3));
        assertEquals(4, array.length);
    }

    @Test
    public void testToArrayT() {
        final $I$Set set = create();
        assertTrue(set.add(_0));
        assertTrue(set.add(_1));
        assertTrue(set.add(_2));
        assertTrue(set.add(_3));
        assertFalse(set.contains(null));
        assertTrue(set.contains(_0));
        assertTrue(set.contains(_1));
        assertTrue(set.contains(_2));
        assertTrue(set.contains(_3));
        assertEquals(4, set.size());

        final $P$[] array = set.toArray(new $P$[4]);
        assertFalse(TestUtil.arrayContains(array, null));
        assertTrue(TestUtil.arrayContains(array, _0));
        assertTrue(TestUtil.arrayContains(array, _1));
        assertTrue(TestUtil.arrayContains(array, _2));
        assertTrue(TestUtil.arrayContains(array, _3));
        assertEquals(4, array.length);
    }

    /*
     * The set has 8 elements and can insert 5 before it expands.
     * We're inserting 5 elements with hc 5 which should wrap the
     * last two in the backing array and trigger a
     * copy when removing the element.
     *
     * 55xxx555
     *      ^ remove this one
     */
     /*
    @Test
    public void testCursorRemoveCopy() {
        final $I$Set set = create();
        for (int i = 0; i < 5; ++i) {
            assertTrue(set.add(($p$)5));
        }
        assertEquals(5, set.size());

        final $I$Cursor it = set.cursor();
        it.next().next();
        for (final $I$Cursor x : it) {
            x.remove();
        }
    }
    */
}
>>