delimiters "$", "$"

OPMap(I, P, p, hck, hcv, X) ::= <<
/*
 * Copyright 2015 Brent Douglas and other contributors
 * as indicated by the @authors tag. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.machinecode.vial.api.map;

import java.util.Map;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public interface O$I$Map<K> extends Map<K,$P$>, Iterable<O$I$Cursor<K$X$ {

    $p$ nv();

    boolean xcontainsValue(final $p$ value);

    $p$ xget(final K key);

    $P$ getOrDefault(final Object key, final $P$ defaultValue);

    $p$ xgetOrDefault(final K key, final $p$ defaultValue);

    O$I$Map<K> with(final K key, final $p$ value);

    $p$ xput(final K key, final $p$ value);

    $P$ putIfAbsent(final Object key, final $P$ value);

    $p$ xputIfAbsent(final K key, final $p$ value);

    boolean remove(final Object key, final Object value);

    boolean xremove(final K key, final $p$ value);

    boolean xremoveValue(final $p$ value);

    boolean replace(final Object key, final $P$ oldValue, final $P$ newValue);

    boolean xreplace(final K key, final $p$ oldValue, final $p$ newValue);

    $P$ replace(final Object key, final $P$ value);

    $p$ xreplace(final K key, final $p$ value);

    O$I$Map<K> capacity(final int desired);

    O$I$Cursor<K> iterator();
}
>>
