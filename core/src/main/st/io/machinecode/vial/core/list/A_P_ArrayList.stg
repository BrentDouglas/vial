delimiters "$", "$"

PArrayList(I, P, p, hck, hcv, X) ::= <<
/*
 * Copyright 2015 Brent Douglas and other contributors
 * as indicated by the @author tags. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.machinecode.vial.core.list;

import io.machinecode.vial.api.$I$Cursor;
import io.machinecode.vial.api.list.$I$List;
import io.machinecode.vial.api.list.$I$ListIterator;
import io.machinecode.vial.api.list.OListIterator;
import io.machinecode.vial.core.Util;

import java.io.Serializable;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.RandomAccess;

/**
 * @author <a href="mailto:brent.douglas@gmail.com">Brent Douglas</a>
 */
public class $I$ArrayList extends $I$BaseList implements RandomAccess, Serializable {
    private static final long serialVersionUID = 0L;

    protected $p$[] _values;
    protected int _size;

    public $I$ArrayList() {
        this(4);
    }

    @SuppressWarnings("unchecked")
    public $I$ArrayList(final int capacity) {
        this._values = new $p$[capacity];
        this._size = 0;
    }

    public $I$ArrayList(final Collection<? extends $P$> c) {
        this(c.size());
        this.addAll(c);
    }

    @Override
    $p$[] _values() {
        return this._values;
    }

    @Override
    public $I$List with(final $p$ value) {
        xadd(value);
        return this;
    }

    @Override
    public $I$ArrayList capacity(final int desired) {
        final int size = this._size;
        final $p$[] values = this._values;
        final int len = values.length;
        final int cap = Util.pow2(Math.max(size, desired));
        if (cap != len) {
            @SuppressWarnings("unchecked")
            final $p$[] newValues = this._values = new $p$[cap];
            System.arraycopy(values, 0, newValues, 0, size);
        }
        return this;
    }

    @Override
    public int size() {
        return this._size;
    }

    @Override
    public boolean isEmpty() {
        return this._size == 0;
    }

    @Override
    public boolean contains(final Object o) {
        return __contains(this._values, 0, this._size, o);
    }

    @Override
    public boolean xcontains(final $p$ o) {
        return __contains(this._values, 0, this._size, o);
    }

    @Override
    public boolean xcontains(final int from, final int to, final $p$ o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __contains(this._values, from, to, o);
    }

    @Override
    public boolean contains(final int from, final int to, final Object o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __contains(this._values, from, to, o);
    }

    @Override
    public boolean add(final $P$ o) {
        return _add(this._size, o);
    }

    @Override
    public void add(final int index, final $P$ o) {
        _add(index, o);
    }

    @Override
    public boolean xadd(final $p$ o) {
        return _add(this._size, o);
    }

    @Override
    public boolean xadd(final int index, final $p$ o) {
        return _add(index, o);
    }

    @Override
    boolean _add(final int index, final $p$ element) {
        final int s = this._size;
        if (index < 0 || index > s) throw new IndexOutOfBoundsException();
        final $p$[] values = this._values;
        final int next = index + 1;
        if (s >= values.length - 1) {
            @SuppressWarnings("unchecked")
            final $p$[] newValues = this._values = new $p$[values.length * 2];
            System.arraycopy(values, 0, newValues, 0, index);
            System.arraycopy(values, index, newValues, next, s - index);
            newValues[index] = element;
        } else {
            System.arraycopy(values, 0, values, 0, index);
            System.arraycopy(values, index, values, next, s - index);
            values[index] = element;
        }
        ++this._size;
        return true;
    }

    @Override
    public boolean remove(final Object o) {
        return o instanceof $P$ && xremove(($p$)o);
    }

    @Override
    public boolean remove(final int from, final int to, final Object o) {
        return o instanceof $P$ && xremove(from, to, ($p$)o);
    }

    @Override
    public $P$ remove(final int index) {
        return xremoveAt(index);
    }

    @Override
    public boolean xremove(final $p$ o) {
        final $p$[] values = this._values;
        final int size = this._size;
        final int index = __xidx(values, 0, size, o);
        if (index == -1) {
            return false;
        }
        System.arraycopy(values, index + 1, values, index, size - index);
        --this._size;
        return true;
    }

    @Override
    public boolean xremove(final int from, final int to, final $p$ o) {
        final int size = this. _size;
        if (to < from || from < 0 || to > size) throw new IndexOutOfBoundsException();
        final $p$[] values = this._values;
        final int rel = __xidx(values, from, to, o);
        if (rel == -1) {
            return false;
        }
        final int index = from + rel;
        System.arraycopy(values, index + 1, values, index, size - index);
        --this._size;
        return true;
    }

    @Override
    public $p$ xremoveAt(final int index) {
        final int size = this._size;
        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();
        final $p$[] values = this._values;
        final $p$ old = values[index];
        System.arraycopy(values, index + 1, values, index, size - index);
        --this._size;
        return old;
    }

    @Override
    public boolean clear(final int from, final int to) {
        final int size = this._size;
        if (to < from || from < 0 || to > size) throw new IndexOutOfBoundsException();
        if (to == from) {
            return false;
        }
        final $p$[] values = this._values;
        final int left = size - to;
        System.arraycopy(values, to, values, from, left);
        this._size -= (to - from);
        return true;
    }

    @Override
    public void clear() {
        this._size = 0;
    }

    @Override
    public $P$ get(final int index) {
        if (index < 0 || index >= this._size) throw new IndexOutOfBoundsException();
        return this._values[index];
    }

    @Override
    public $P$ set(final int index, final $P$ element) {
        if (index < 0 || index >= this._size) throw new IndexOutOfBoundsException();
        final $p$[] values = this._values;
        final $p$ old = values[index];
        values[index] = element;
        return old;
    }

    @Override
    public int indexOf(final Object o) {
        return __indexOf(this._values, 0, this._size, o);
    }

    @Override
    public int lastIndexOf(final Object o) {
        return __lastIndexOf(this._values, 0, this._size, o);
    }

    @Override
    public int indexOf(final int from, final int to, final Object o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __indexOf(this._values, from, to, o);
    }

    @Override
    public int lastIndexOf(final int from, final int to, final Object o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __lastIndexOf(this._values, from, to, o);
    }

    @Override
    public int xindexOf(final $p$ o) {
        return __xidx(this._values, 0, this._size, o);
    }

    @Override
    public int xlastIndexOf(final $p$ o) {
        return __xlidx(this._values, 0, this._size, o);
    }

    @Override
    public int xindexOf(final int from, final int to, final $p$ o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __xidx(this._values, from, to, o);
    }

    @Override
    public int xlastIndexOf(final int from, final int to, final $p$ o) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __xlidx(this._values, from, to, o);
    }

    @Override
    public boolean containsAll(final Collection<?> c) {
        for (final Object x : c) {
            if (!this.contains(x)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean containsAll(final int from, final int to, final Collection<?> c) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        for (final Object x : c) {
            if (!__contains(this._values, from, to, x)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean addAll(final Collection<? extends $P$> c) {
        boolean ret = false;
        for (final $P$ x : c) {
            ret |= add(x);
        }
        return ret;
    }

    @Override
    public boolean addAll(int index, final Collection<? extends $P$> c) {
        boolean ret = false;
        for (final $P$ x : c) {
            ret |= _add(index++, x);
        }
        return ret;
    }

    @Override
    int _addAll(int index, final Collection<? extends $P$> c) {
        int ret = 0;
        for (final $P$ x : c) {
            if (_add(index++, x)) {
                ++ret;
            }
        }
        return ret;
    }

    @Override
    public boolean removeAll(final Collection<?> c) {
        return __removeAll(this, 0, this._size, c) != 0;
    }

    @Override
    public boolean removeAll(final int from, int to, final Collection<?> c) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __removeAll(this, from, to, c) != 0;
    }

    @Override
    public boolean retainAll(final Collection<?> c) {
        return __retainAll(this, this._values, 0, this._size, c) != 0;
    }

    @Override
    public boolean retainAll(final int from, int to, final Collection<?> c) {
        if (to < from || from < 0 || to > this._size) throw new IndexOutOfBoundsException();
        return __retainAll(this, this._values, from, to, c) != 0;
    }

    @Override
    public Cur cursor() {
        return new Cur(this, 0);
    }

    @Override
    public It iterator() {
        return new It(this, 0);
    }

    @Override
    public It listIterator() {
        return new It(this, 0);
    }

    @Override
    public It listIterator(final int index) {
        if (index < 0 || index > _size) throw new IndexOutOfBoundsException();
        return new It(this, index);
    }

    @Override
    public Object[] toArray() {
        final int size = this._size;
        final Object[] ret = new Object[size];
        final $p$[] values = this._values;
        for (int i = 0; i < size; ++i) {
            ret[i] = values[i];
        }
        return ret;
    }

    @Override
    @SuppressWarnings("unchecked")
    public <T> T[] toArray(final T[] dest) {
    final int size = this._size;
    return __toArray(this._values, size, 0, size, 0, dest);
    }

    @Override
    public Object[] toArray(final int from, final int to) {
        return __toArray(this._values, this._size, from, to, 0);
    }

    @Override
    public <T> T[] toArray(final int from, final int to, final T[] dest) {
        return __toArray(this._values, this._size, from, to, 0, dest);
    }

    @Override
    public SubList subList(final int from, final int to) {
        if (from < 0 || to > this._size || to < from) throw new IndexOutOfBoundsException();
        return new SubList(this, from, to);
    }

    @Override
    public boolean equals(final Object o) {
        return __equals(this, this._values, 0, this._size, o);
    }

    @Override
    public int hashCode() {
        return __hashCode(this._values, 0, this._size);
    }

    @Override
    public String toString() {
        return __toString(this._values, 0, this._size);
    }

    @Override
    public boolean xcontainsAll(final $p$... c) {
        for (final $p$ o : c) {
            if (!xcontains(o)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean xcontainsRange(final int from, final int to, final $p$... c) {
        if (from < 0 || to > c.length || to < from) throw new IndexOutOfBoundsException();
        for (int i = from; i < to; ++i) {
            if (!xcontains(c[i])) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean xaddAll(final $p$... c) {
        return __xaddRange(this, this._size, c, 0, c.length) != 0;
    }

    @Override
    public boolean xaddRange(final int from, final int to, final $p$... c) {
        if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
        return __xaddRange(this, this._size, c, from, to) != 0;
    }

    @Override
    public boolean xremoveAll(final $p$... c) {
        return __xremoveRange(this, 0, this._size, c, 0, c.length) != 0;
    }

    @Override
    public boolean xremoveRange(final int from, final int to, final $p$... c) {
        if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
        return __xremoveRange(this, 0, this._size, c, from, to) != 0;
    }

    @Override
    public boolean xretainAll(final $p$... c) {
        return __xretainRange(this, this._values, 0, this._size, c, 0, c.length) != 0;
    }

    @Override
    public boolean xretainRange(final int from, final int to, final $p$... c) {
        if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
        return __xretainRange(this, this._values, 0, this._size, c, from, to) != 0;
    }

    @Override
    public $p$[] xtoArray() {
        final int size = this._size;
        return __xtoArray(this._values, size, 0, size, 0);
    }

    @Override
    public $p$[] xtoArray(final $p$[] dest) {
        final int size = this._size;
        return __xtoArray(this._values, size, 0, size, 0, dest);
    }

    @Override
    public $p$[] xtoArray(final int from, final int to) {
        return __xtoArray(this._values, this._size, from, to, 0);
    }

    @Override
    public $p$[] xtoArray(final int from, final int to, final int destPos, final $p$[] dest) {
        return __xtoArray(this._values, this._size, from, to, destPos, dest);
    }

    protected static class SubList extends $I$BaseList implements RandomAccess {
        final $I$BaseList _list;
        final int _from;
        int _to;

        SubList(final $I$BaseList list, final int from, final int to) {
            this._list = list;
            this._from = from;
            this._to = to;
        }

        @Override
        public int size() {
            return this._to - this._from;
        }

        @Override
        public boolean isEmpty() {
            return this._to - this._from == 0;
        }

        @Override
        public boolean contains(final Object o) {
            return __contains(this._list._values(), this._from, this._to, o);
        }

        @Override
        public boolean contains(final int from, final int to, final Object o) {
            final int _from = this._from;
            return this._list.contains(_from + from, _from + to, o);
        }

        @Override
        public boolean xcontains(final $p$ o) {
            return this._list.xcontains(_from, _to, o);
        }

        @Override
        public boolean xcontains(final int from, final int to, final $p$ o) {
            final int _from = this._from;
            return this._list.xcontains(_from + from, _from + to, o);
        }

        @Override
        public boolean add(final $P$ o) {
            return xadd(o);
        }

        @Override
        public void add(final int index, final $P$ o) {
            if (index < 0 || index > this._to - this._from) throw new IndexOutOfBoundsException();
            this._add(index, o);
        }

        @Override
        public boolean xadd(final $p$ o) {
            if (this._list._add(this._to, o)) {
                ++this._to;
                return true;
            }
            return false;
        }

        @Override
        public boolean xadd(final int index, final $p$ o) {
            if (index < 0 || index > this._to - this._from) throw new IndexOutOfBoundsException();
            return this._add(index, o);
        }

        @Override
        boolean _add(final int index, final $p$ element) {
            if (this._list._add(this._from + index, element)) {
                ++this._to;
                return true;
            }
            return false;
        }

        @Override
        public $P$ remove(final int index) {
            return xremoveAt(index);
        }

        @Override
        public boolean remove(final Object o) {
            return o instanceof $P$ && this.xremove(($p$)o);
        }

        @Override
        public boolean remove(final int from, final int to, final Object o) {
            return o instanceof $P$ && this.xremove(from, to, ($p$)o);
        }

        @Override
        public boolean xremove(final $p$ o) {
            if (this._list.xremove(this._from, this._to, o)) {
                --this._to;
                return true;
            }
            return false;
        }

        @Override
        public $p$ xremoveAt(final int index) {
            final $p$ ret = this._list.xremoveAt(this._from + index);
            --this._to;
            return ret;
        }

        @Override
        public boolean xremove(final int from, final int to, final $p$ o) {
            final int _from = this._from;
            if (this._list.xremove(_from + from, _from + to, o)) {
                --this._to;
                return true;
            }
            return false;
        }

        @Override
        public boolean containsAll(final Collection<?> c) {
            return this._list.containsAll(this._from, this._to, c);
        }

        @Override
        public boolean containsAll(final int from, final int to, final Collection<?> c) {
            final int _f = this._from;
            final int _from = _f + from;
            int _to = _f + to;
            if (_to < _from || _from < _f || to > this._to) throw new IndexOutOfBoundsException();
            return this._list.containsAll(_from, _to, c);
        }

        @Override
        public boolean addAll(final Collection<? extends $P$> c) {
            return this._addAll(this._to - this._from, c) != 0;
        }

        @Override
        public boolean addAll(final int index, final Collection<? extends $P$> c) {
            return this._addAll(index, c) != 0;
        }

        @Override
        int _addAll(final int index, final Collection<? extends $P$> c) {
            final int i = this._from + index;
            if (index < 0 || i > this._to) throw new IndexOutOfBoundsException();
            final int ret = this._list._addAll(i, c);
            this._to += ret;
            return ret;
        }

        @Override
        public boolean removeAll(final Collection<?> c) {
            return this._removeAll(0, this._to - this._from, c) != 0;
        }

        @Override
        public boolean removeAll(final int from, final int to, final Collection<?> c) {
            return this._removeAll(from, to, c) != 0;
        }

        public int _removeAll(final int from, final int to, final Collection<?> c) {
            final int _f = this._from;
            final int _from = _f + from;
            int _to = _f + to;
            if (_to < _from || _from < _f || to > this._to) throw new IndexOutOfBoundsException();
            final $I$BaseList list = this._list;
            final int ret = __removeAll(list, _from, _to, c);
            this._to -= ret;
            return ret;
        }

        @Override
        public boolean retainAll(final Collection<?> c) {
            return _retainAll(0, this._to - this._from, c)!= 0;
        }

        @Override
        public boolean retainAll(final int from, final int to, final Collection<?> c) {
            return _retainAll(from, to, c) != 0;
        }

        private int _retainAll(final int from, final int to, final Collection<?> c) {
            if (c == null) throw new NullPointerException(); //TODO Message
            final int _f = this._from;
            final int _from = _f + from;
            final int _to = _f + to;
            if (_to < _from || _from < _f || _to > this._to) throw new IndexOutOfBoundsException();
            final int ret = __retainAll(this._list, this._list._values(), _from, _to, c);
            this._to -= ret;
            return ret;
        }

        @Override
        public void clear() {
            if (this._list.clear(this._from, this._to)) {
                this._to = this._from;
            }
        }

        @Override
        public $P$ get(final int index) {
            final int f = this._from;
            if (index < 0 || index >= this._to - f) throw new IndexOutOfBoundsException();
            return this._list.get(f + index);
        }

        @Override
        public $P$ set(final int index, final $P$ element) {
            final int f = this._from;
            if (index < 0 || index >= this._to - f) throw new IndexOutOfBoundsException();
            return this._list.set(f + index, element);
        }

        @Override
        public int indexOf(final Object o) {
            return __indexOf(this._list._values(), this._from, this._to, o);
        }

        @Override
        public int lastIndexOf(final Object o) {
            return __lastIndexOf(this._list._values(), this._from, this._to, o);
        }

        @Override
        public int indexOf(final int from, final int to, final Object o) {
            final int f = this._from;
            final int _to = f + to;
            if (to < from || from < 0 || _to > this._to) throw new IndexOutOfBoundsException();
            return __indexOf(this._list._values(), f + from, _to, o);
        }

        @Override
        public int lastIndexOf(final int from, final int to, final Object o) {
            final int f = this._from;
            final int _to = f + to;
            if (to < from || from < 0 || _to > this._to) throw new IndexOutOfBoundsException();
            return __lastIndexOf(this._list._values(), f + from, _to, o);
        }

        @Override
        public int xindexOf(final $p$ o) {
            return __xidx(this._list._values(), this._from, this._to, o);
        }

        @Override
        public int xlastIndexOf(final $p$ o) {
            return __xlidx(this._list._values(), this._from, this._to, o);
        }

        @Override
        public int xindexOf(final int from, final int to, final $p$ o) {
            final int f = this._from;
            final int _to = f + to;
            if (to < from || from < 0 || _to > this._to) throw new IndexOutOfBoundsException();
            return __xidx(this._list._values(), f + from, _to, o);
        }

        @Override
        public int xlastIndexOf(final int from, final int to, final $p$ o) {
            final int f = this._from;
            final int _to = f + to;
            if (to < from || from < 0 || _to > this._to) throw new IndexOutOfBoundsException();
            return __xlidx(this._list._values(), f + from, _to, o);
        }

        @Override
        public boolean clear(final int from, final int to) {
            final int _from = this._from;
            if (this._list.clear(_from + from, _from + to)) {
                this._to -= (to - from);
                return true;
            }
            return false;
        }

        @Override
        public Object[] toArray() {
            return this._list.toArray(this._from, this._to);
        }

        @Override
        public <T> T[] toArray(final T[] a) {
            return this._list.toArray(this._from, this._to, a);
        }

        @Override
        public Object[] toArray(final int from, final int to) {
            final int _from = this._from;
            return this._list.toArray(_from + from, _from + to);
        }

        @Override
        public <T> T[] toArray(final int from, final int to, final T[] a) {
            final int _from = this._from;
            return this._list.toArray(_from + from, _from + to, a);
        }

        @Override
        public SubList with(final $p$ value) {
            this.add(value);
            return this;
        }

        @Override
        public SubList capacity(final int desired) {
            final $I$BaseList list = this._list;
            final int diff = list.size() - (this._to - this._from);
            list.capacity(diff + desired);
            return this;
        }

        @Override
        public $I$Cursor cursor() {
            return new SubCur(this, this._from);
        }

        @Override
        public SubIt iterator() {
            return new SubIt(this, this._from);
        }

        @Override
        public SubIt listIterator() {
            return new SubIt(this, this._from);
        }

        @Override
        public SubIt listIterator(final int index) {
            final int _index = this._from + index;
            if (_index < this._from || _index > this._to) throw new IndexOutOfBoundsException();
            return new SubIt(this, _index);
        }

        @Override
        public SubList subList(final int from, final int to) {
            final int _f = this._from;
            final int _from = _f + from;
            final int _to = _f + to;
            if (to < from || _from < _f || _to > this._to) throw new IndexOutOfBoundsException();
            return new SubList(this, _from, _to);
        }

        @Override
        public boolean equals(final Object o) {
            return __equals(this, this._list._values(), this._from, this._to, o);
        }

        @Override
        public int hashCode() {
            return __hashCode(this._list._values(), this._from, this._to);
        }

        @Override
        public String toString() {
            return __toString(this._list._values(), this._from, this._to);
        }

        @Override
        $p$[] _values() {
            return this._list._values();
        }

    @Override
    public boolean xcontainsAll(final $p$... c) {
        final int from = this._from;
        final int to = this._to;
        final $I$BaseList list = this._list;
        for (final $p$ o : c) {
            if (!list.xcontains(from, to, o)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean xcontainsRange(final int from, final int to, final $p$... c) {
        if (from < 0 || to > c.length || to < from) throw new IndexOutOfBoundsException();
        for (int i = from; i < to; ++i) {
            if (!xcontains(_from, _to, c[i])) {
                return false;
            }
        }
        return true;
    }

        @Override
        public boolean xaddAll(final $p$... c) {
            return __xaddRange(this, this._to, c, 0, c.length) != 0;
        }

        @Override
        public boolean xaddRange(final int from, final int to, final $p$... c) {
            if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
            return __xaddRange(this, this._to, c, from, to) != 0;
        }

        @Override
        public boolean xremoveAll(final $p$... c) {
            return __xremoveRange(this, this._from, this._to, c, 0, c.length) != 0;
        }

        @Override
        public boolean xremoveRange(final int from, final int to, final $p$... c) {
            if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
            return __xremoveRange(this, this._from, this._to, c, from, to) != 0;
        }

        @Override
        public boolean xretainAll(final $p$... c) {
            return __xretainRange(this, this._list._values(), this._from, this._to, c, 0, c.length) != 0;
        }

        @Override
        public boolean xretainRange(final int from, final int to, final $p$... c) {
            if (to < from || from < 0 || to > c.length) throw new IndexOutOfBoundsException();
            return __xretainRange(this, this._list._values(), this._from, this._to, c, from, to) != 0;
        }

        @Override
        public $p$[] xtoArray() {
            return this._list.xtoArray(this._from, this._to);
        }

        @Override
        public $p$[] xtoArray(final $p$[] dest) {
            return this._list.xtoArray(this._from, this._to, 0, dest);
        }

        @Override
        public $p$[] xtoArray(final int from, final int to) {
            final int _f = this._from;
            final int _from = _f + from;
            final int _to = _f + to;
            if (to < from || _from < _f || _to > this._to) throw new IndexOutOfBoundsException();
            return this._list.xtoArray(_from, _to);
        }

        @Override
        public $p$[] xtoArray(final int from, final int to, final int destPos, final $p$[] dest) {
            final int _f = this._from;
            final int _from = _f + from;
            final int _to = _f + to;
            if (to < from || _from < _f || _to > this._to) throw new IndexOutOfBoundsException();
            return this._list.xtoArray(_from, _to, destPos, dest);
        }
    }

    public abstract static class _It<I,L extends $I$BaseList> implements OListIterator<I> {
        protected static final int INVALID = -1;

        final L _list;
        final int _from;
        int _index;
        int _last;
        protected $p$ _value;

        private _It(final L list, final int from, final int index) {
            this._list = list;
            this._from = from;
            this._index = index;
            this._last = INVALID;
        }

        protected abstract int _to();

        @Override
        public boolean hasNext() {
            return this._index < _to();
        }

        @Override
        public boolean hasPrevious() {
            return this._index > this._from;
        }

        @Override
        public int nextIndex() {
            return this._index;
        }

        @Override
        public int previousIndex() {
            return this._index - 1;
        }

        protected void _before() {
            this._index = this._from;
            this._last = INVALID;
        }

        protected void _after() {
            this._index = _to();
            this._last = INVALID;
        }

        protected void _index(final int index) {
            if (index < this._from || index >= _to()) throw new IndexOutOfBoundsException();
            this._index = index;
            this._last = INVALID;
        }

        protected void _set(final $p$ x) {
            final int index = this._last;
            if (index < this._from || index >= _to()) throw new IllegalStateException();
            this._list._values()[index] = x;
        }

        protected void _add(final $p$ x) {
            this._list.add(this._index++, x);
            this._last = INVALID;
        }

        protected void _advance() throws NoSuchElementException {
            final int index = this._index;
            if (index >= _to()) throw new NoSuchElementException();
            this._value = this._list._values()[index];
            this._last = index;
            ++this._index;
        }

        protected void _retreat() throws NoSuchElementException {
            final int index = this._index - 1;
            if (index < this._from || index >= _to()) throw new NoSuchElementException();
            this._value = this._list._values()[index];
            this._last = this._index = index;
        }
    }

    public abstract static class _OIt<I> extends _It<I,$I$ArrayList> {

        private _OIt(final $I$ArrayList list, final int index) {
            super(list, 0, index);
        }

        @Override
        protected int _to() {
            return this._list.size();
        }

        @Override
        public void remove() {
            final int index = this._last;
            final $I$ArrayList list = this._list;
            final int size = list._size;
            if (index < 0 || index >= size) throw new IllegalStateException();
            final $p$[] values = list._values;
            System.arraycopy(values, index + 1, values, index, size - index);
            --list._size;
            this._index = index;
            this._last = INVALID;
        }
    }

    public static class It extends _OIt<$P$> implements $I$ListIterator {

        private It(final $I$ArrayList list, final int index) {
            super(list, index);
        }

        @Override
        public $P$ next() {
            _advance();
            return this._value;
        }

        @Override
        public $P$ previous() {
            _retreat();
            return this._value;
        }

        @Override
        public void set(final $P$ x) {
            this._set(x);
        }

        @Override
        public void add(final $P$ x) {
            this._add(x);
        }

        @Override
        public It before() {
            this._before();
            return this;
        }

        @Override
        public It after() {
            this._after();
            return this;
        }

        @Override
        public It index(final int index) {
            this._index(index);
            return this;
        }

        @Override
        public $p$ value() {
            return this._value;
        }

        @Override
        public It setValue(final $p$ value) {
            this._set(value);
            return this;
        }

        @Override
        public It addValue(final $p$ value) {
            this._add(value);
            return this;
        }
    }

    public static class Cur extends _OIt<$I$Cursor> implements $I$Cursor {
        public Cur(final $I$ArrayList list, final int index) {
            super(list, index);
        }

        @Override
        public $p$ value() {
            return this._value;
        }

        @Override
        public Cur iterator() {
            return this;
        }

        @Override
        public $I$Cursor next() {
            _advance();
            return this;
        }

        @Override
        public $I$Cursor previous() {
            _retreat();
            return this;
        }

        @Override
        public void set(final $I$Cursor that) {
            _set(that.value());
        }

        @Override
        public void add(final $I$Cursor that) {
            _add(that.value());
        }

        @Override
        public Cur before() {
            this._before();
            return this;
        }

        @Override
        public Cur after() {
            this._after();
            return this;
        }

        @Override
        public Cur index(final int index) {
            this._index(index);
            return this;
        }
    }

    public abstract static class _SubIt<I> extends _It<I,SubList> {

        private _SubIt(final SubList list, final int index) {
            super(list, list._from, index);
        }

        @Override
        protected int _to() {
            return this._list._to;
        }

        @Override
        public void remove() {
            final int index = this._last;
            if (index < this._from) throw new IllegalStateException();
            final SubList list = this._list;
            if (index >= list._to) throw new IllegalStateException();
            final $p$[] values = list._values();
            System.arraycopy(values, index + 1, values, index, list._to - index);
            --list._to;
            this._index = index;
            this._last = INVALID;
        }
    }

    public static class SubIt extends _SubIt<$P$> implements $I$ListIterator {

        private SubIt(final SubList list, final int index) {
            super(list, index);
        }

        @Override
        public $P$ next() {
            _advance();
            return this._value;
        }

        @Override
        public $P$ previous() {
            _retreat();
            return this._value;
        }

        @Override
        public void set(final $P$ x) {
            this._set(x);
        }

        @Override
        public void add(final $P$ x) {
            this._add(x);
        }

        @Override
        public SubIt before() {
            this._before();
            return this;
        }

        @Override
        public SubIt after() {
            this._after();
            return this;
        }

        @Override
        public SubIt index(final int index) {
            this._index(index);
            return this;
        }

        @Override
        public $p$ value() {
            return this._value;
        }

        @Override
        public SubIt setValue(final $p$ value) {
            this._set(value);
            return this;
        }

        @Override
        public SubIt addValue(final $p$ value) {
            this._add(value);
            return this;
        }
    }

    public static class SubCur extends _SubIt<$I$Cursor> implements $I$Cursor {
        public SubCur(final SubList list, final int index) {
            super(list, index);
        }

        @Override
        public $p$ value() {
            return this._value;
        }

        @Override
        public SubCur iterator() {
            return this;
        }

        @Override
        public $I$Cursor next() {
            _advance();
            return this;
        }

        @Override
        public $I$Cursor previous() {
            _retreat();
            return this;
        }

        @Override
        public void set(final $I$Cursor that) {
            _set(that.value());
        }

        @Override
        public void add(final $I$Cursor that) {
            _add(that.value());
        }

        @Override
        public SubCur before() {
            this._before();
            return this;
        }

        @Override
        public SubCur after() {
            this._after();
            return this;
        }

        @Override
        public SubCur index(final int index) {
            this._index(index);
            return this;
        }
    }
}
>>