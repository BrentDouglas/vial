delimiters "$", "$"

PBaseList(I, P, p, hck, hcv, X) ::= <<
/*
 * Copyright (C) 2015 Brent Douglas and other contributors
 * as indicated by the @author tags. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.machinecode.vial.core.list;

import io.machinecode.vial.api.list.$I$List;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.List;

/**
* @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
* @since 1.0
*/
abstract class $I$BaseList implements $I$List {

    abstract $p$[] _values();

    abstract boolean _add(final int index, final $p$ element);

    abstract int _addAll(int index, final Collection<? extends $P$> c);

    static int __xaddRange(final $I$List list, int index, final $p$[] c, final int min, int max) {
        int ret = 0;
        for (int i = min; i < max; ++i) {
            if (list.xadd(index++, c[i])) {
                ++ret;
            }
        }
        return ret;
    }

    static int __indexOf(final $p$[] values, final int from, final int to, final Object o) {
        return !(o instanceof $P$)
                ? -1
                : __idx(values, from, to, o);
    }

    static int __lastIndexOf(final $p$[] values, final int from, final int to, final Object o) {
        return !(o instanceof $P$)
                ? -1
                : __lidx(values, from, to, o);
    }

    static boolean __contains(final $p$[] values, final int from, final int to, final Object o) {
        return (o instanceof $P$) && __idx(values, from, to, o) != -1;
    }

    static boolean __contains(final $p$[] values, final int from, final int to, final $p$ o) {
        return __idx(values, from, to, o) != -1;
    }

    static int __removeAll(final $I$List list, final int from, int to, final Collection<?> c) {
        int ret = 0;
        for (final Object x : c) {
            while (list.remove(from, to, x)) {
                --to;
                ++ret;
            }
        }
        return ret;
    }

    static int __xremoveRange(final $I$List list, final int from, int to, final $p$[] c, final int min, int max) {
        int ret = 0;
        for (int i = min; i < max; ++i) {
            while (list.xremove(from, to, c[i])) {
                --to;
                ++ret;
            }
        }
        return ret;
    }

    static int __retainAll(final $I$List list, final $p$[] values, final int from, int to, final Collection<?> c) {
        if (c == null) throw new NullPointerException(); //TODO Message
        if (to < from) throw new IndexOutOfBoundsException();
        int ret = 0;
        for (int i = from; i < to;) {
            final $p$ x = values[i];
            if (!c.contains(x)) {
                list.remove(i);
                --to;
                ++ret;
            } else {
                ++i;
            }
        }
        return ret;
    }

    static int __xretainRange(final $I$List list, final $p$[] values, final int from, int to, final $p$[] c, final int min, int max) {
        if (c == null) throw new NullPointerException(); //TODO Message
        if (to < from) throw new IndexOutOfBoundsException();
        int ret = 0;
        for (int i = from; i < to;) {
            final $p$ x = values[i];
            boolean found = false;
            for (int j = min; j < max; ++j) {
                if (c[j] == x) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                list.remove(i);
                --to;
                ++ret;
            } else {
                ++i;
            }
        }
        return ret;
    }

    static boolean __equals(final Object self, final $p$[] values, final int from, final int to, final Object o) {
        if (self == o) return true;
        if (o == null || !(o instanceof List)) return false;
        final List<?> that = (List<?>) o;
        final int size = to - from;
        if (size != that.size()) return false;

        for (int i = from; i < to; ++i) {
            final $p$ val = values[i];
            final Object theirs = that.get(i);
            if (!(theirs instanceof $P$) || val != ($p$)theirs) {
                return false;
            }
        }
        return true;
    }

    static int __hashCode(final $p$[] values, final int from, final int to) {
        int h = 1;
        for (int i = from; i < to; ++i) {
            final $p$ key = values[i];
            h = 31 * h + $hck$;
        }
        return h;
    }

    static String __toString(final $p$[] values, final int from, final int to) {
        final StringBuilder sb = new StringBuilder("[");
        boolean add = false;
        for (int i = from; i < to; ++i) {
            if (add) {
                sb.append(", ");
            }
            add = true;
            final $p$ val = values[i];
            sb.append(val);
        }
        sb.append(']');
        return sb.toString();
    }

    static int __xlidx(final $p$[] values, final int from, final int to, final $p$ o) {
        for (int i = to - 1; i >= from; --i) {
            if (o == values[i]) {
                return i - from;
            }
        }
        return -1;
    }

    static int __lidx(final $p$[] values, final int from, final int to, final Object o) {
        for (int i = to - 1; i >= from; --i) {
            if (o.equals(values[i])) {
                return i - from;
            }
        }
        return -1;
    }

    static int __xidx(final $p$[] values, final int from, final int to, final $p$ o) {
        for (int i = from; i < to; ++i) {
            if (o == values[i]) {
                return i - from;
            }
        }
        return -1;
    }

    static int __idx(final $p$[] values, final int from, final int to, final Object o) {
        for (int i = from; i < to; ++i) {
            if (o.equals(values[i])) {
                return i - from;
            }
        }
        return -1;
    }

    static Object[] __toArray(final $p$[] values, final int size, final int from, final int to, final int min) {
        if (from < 0 || to > size || to < from) throw new IndexOutOfBoundsException();
        final int len = to - from;
        final Object[] ret = new Object[len];
        for (int i = from, j = min; i < to; ++i, ++j) {
            ret[j] = values[i];
        }
        return ret;
    }

    static $p$[] __xtoArray(final $p$[] values, final int size, final int from, final int to, final int min) {
        if (from < 0 || to > size || to < from) throw new IndexOutOfBoundsException();
        final int len = to - from;
        final $p$[] ret = new $p$[len];
        System.arraycopy(values, from, ret, min, len);
        return ret;
    }

    @SuppressWarnings("unchecked")
    static <T> T[] __toArray(final $p$[] values, final int size, final int from, final int to, final int min, final T[] a) {
        if (from < 0 || to > size || to < from) throw new IndexOutOfBoundsException();
        final int len = to - from;
        final T[] ret;
        if (a.length < len) {
            ret = (T[]) Array.newInstance(a.getClass().getComponentType(), len);
        }  else if (a.length > len) {
            ret = a;
            ret[len] = null;
        } else {
            ret = a;
        }
        for (int i = from, j = min; i < to; ++i, ++j) {
            ret[j] = (T)($P$)values[i];
        }
        return ret;
    }

    static $p$[] __xtoArray(final $p$[] values, final int size, final int from, final int to, final int min, final $p$[] a) {
        if (from < 0 || to > size || to < from) throw new IndexOutOfBoundsException();
        final int len = to - from;
        final $p$[] ret;
        if (a.length < len) {
            ret = new $p$[len];
        } else {
            ret = a;
        }
        System.arraycopy(values, from, ret, min, len);
        return ret;
    }
}
>>