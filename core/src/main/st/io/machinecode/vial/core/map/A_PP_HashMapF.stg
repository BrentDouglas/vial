delimiters "$", "$"

PPHashMapF(Ik, Pk, pk, Iv, Pv, pv, hc, X) ::= <<
package io.machinecode.vial.core.map;

import io.machinecode.vial.api.Spread;
import io.machinecode.vial.api.map.$Ik$$Iv$Cursor;
import io.machinecode.vial.api.map.$Ik$$Iv$Map;
import io.machinecode.vial.core.Hash;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
 * @since 1.0
 */
public class $Ik$$Iv$HashMapF extends Hash implements $Ik$$Iv$Map {
    private static final long serialVersionUID = 0L;

    private static final int MAX_CAPACITY = 1 << 30;
    private static final int DEFAULT_CAPACITY = 4;
    private static final float DEFAULT_LOAD_FACTOR = 0.75f;

    private static final $pk$ NO_KEY = 0;
    private static final $pv$ NO_VALUE = 0;

    private $pk$[] _keys;
    private $pv$[] _values;
    private boolean _haveNoValue;
    private $pv$ _noValue;

    private final Spread _spread;
    private final float _factor;
    private int _threshold;
    private int _size;

    private int _mask;

    public $Ik$$Iv$HashMapF() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, Spread.QUICK);
    }

    public $Ik$$Iv$HashMapF(final int capacity) {
        this(capacity, DEFAULT_LOAD_FACTOR, Spread.QUICK);
    }

    public $Ik$$Iv$HashMapF(final float factor) {
        this(DEFAULT_CAPACITY, factor, Spread.QUICK);
    }

    public $Ik$$Iv$HashMapF(final Map<? extends $Pk$, ? extends $Pv$> m) {
        if (m instanceof $Ik$$Iv$HashMapF) {
            final $Ik$$Iv$HashMapF x = ($Ik$$Iv$HashMapF)m;
            this._spread = x._spread;
            this._factor = x._factor;
            this._size = x._size;
            this._threshold = x._threshold;
            this._mask = x._mask;
            this._haveNoValue = x._haveNoValue;
            this._noValue = x._noValue;
            this._keys = new $pk$[x._keys.length];
            this._values = new $pv$[x._values.length];
            System.arraycopy(x._keys, 0, this._keys, 0, x._keys.length);
            System.arraycopy(x._values, 0, this._values, 0, x._values.length);
        } else {
            this._spread = Spread.QUICK;
            this._factor = DEFAULT_LOAD_FACTOR;
            final int capacity = Math.max((int) (m.size() / this._factor) + 1, DEFAULT_CAPACITY);
            this._size = 0;
            final int cap = capacity(capacity, this._factor, MAX_CAPACITY);
            this._threshold = (int)(cap * this._factor);
            this._mask = cap - 1;
            this._keys = new $pk$[cap];
            this._values = new $pv$[cap];
            putAll(m);
        }
    }

    public $Ik$$Iv$HashMapF(final int capacity, final float factor) {
        this(capacity, factor, Spread.QUICK);
    }

    public $Ik$$Iv$HashMapF(final int _capacity, final float factor, final Spread spread) {
        assert factor > 0 && factor <= 1;
        assert spread != null;
        assert _capacity >= 0;
        this._spread = spread;
        final int capacity = Math.max((int) (_capacity / factor) + 1, DEFAULT_CAPACITY);
        this._factor = factor;
        this._size = 0;
        final  int cap = capacity(capacity, factor, MAX_CAPACITY);
        this._threshold = (int)(cap * factor);
        this._mask = cap - 1;
        this._keys = new $pk$[cap];
        this._values = new $pv$[cap];
    }

    @Override
    public int size() {
        return _size;
    }

    @Override
    public boolean isEmpty() {
        return _size == 0;
    }

    @Override
    public boolean containsKey(final Object key) {
        return key instanceof $Pk$ && xcontainsKey(($pk$)key);
    }

    @Override
    public boolean xcontainsKey(final $pk$ key) {
        if (key == NO_KEY) {
            return this._haveNoValue;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return false;
            } else if (k == key) {
                return true;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ nv() {
        return NO_VALUE;
    }

    @Override
    public boolean containsValue(final Object value) {
        return value instanceof $Pv$ && xcontainsValue(($pv$)value);
    }

    @Override
    public boolean xcontainsValue(final $pv$ value) {
        if (_haveNoValue && _noValue == value) {
            return true;
        }
        for (int i = 0; i < this._keys.length; i++) {
            final $pk$ k = this._keys[i];
            if (k != NO_KEY && this._values[i] == value) {
                return true;
            }
        }
        return false;
    }

    @Override
    public $Pv$ get(final Object _key) {
        if (!(_key instanceof $Pk$)) {
            return null;
        }
        final $pk$ key = ($pk$)_key;
        if (key == NO_KEY) {
            return this._haveNoValue
                    ? this._noValue
                    : null;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return null;
            } else if (k == key) {
                return this._values[index];
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ xget(final $pk$ key) {
        if (key == NO_KEY) {
            return this._haveNoValue
                    ? this._noValue
                    : NO_VALUE;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return NO_VALUE;
            } else if (k == key) {
                return this._values[index];
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $Pv$ getOrDefault(final Object key, final $Pv$ defaultValue) {
        if (key instanceof $Pk$) {
            return xgetOrDefault(($pk$) key, ($pv$)defaultValue);
        } else {
            return defaultValue;
        }
    }

    @Override
    public $pv$ xgetOrDefault(final $pk$ key, final $pv$ defaultValue) {
        if (key == NO_KEY) {
            return this._haveNoValue
                    ? this._noValue
                    : defaultValue;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return defaultValue;
            } else if (k == key) {
                return this._values[index];
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $Pv$ put(final $Pk$ _key, final $Pv$ _value) {
        final $pk$ key = _key;
        final $pv$ value = _value;
        if (key == NO_KEY) {
            final $Pv$ old;
            if (!this._haveNoValue) {
                this._size++;
                old = null;
            } else {
                old = this._noValue;
            }
            this._noValue = value;
            this._haveNoValue = true;
            return old;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                this._keys[index] = key;
                this._values[index] = value;
                this._size++;
                if (this._size >= this._threshold) {
                    _rehash();
                }
                return null;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                this._values[index] = value;
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ xput(final $pk$ key, final $pv$ value) {
        if (key == NO_KEY) {
            final $pv$ old;
            if (!this._haveNoValue) {
                this._size++;
                old = NO_VALUE;
            } else {
                old = this._noValue;
            }
            this._noValue = value;
            this._haveNoValue = true;
            return old;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                this._keys[index] = key;
                this._values[index] = value;
                this._size++;
                if (this._size >= this._threshold) {
                    _rehash();
                }
                return NO_VALUE;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                this._values[index] = value;
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $Pv$ putIfAbsent(final $Pk$ _key, final $Pv$ _value) {
        final $pk$ key = _key;
        final $pv$ value = _value;
        if (key == NO_KEY) {
            if (this._haveNoValue) {
                return this._noValue;
            }
            this._size++;
            this._noValue = value;
            this._haveNoValue = true;
            return null;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                this._keys[index] = key;
                this._values[index] = value;
                this._size++;
                if (this._size >= this._threshold) {
                    _rehash();
                }
                return null;
            } else if (k == key) {
                return this._values[index];
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ xputIfAbsent(final $pk$ key, final $pv$ value) {
        if (key == NO_KEY) {
            if (this._haveNoValue) {
                return this._noValue;
            }
            this._size++;
            this._noValue = value;
            this._haveNoValue = true;
            return NO_VALUE;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                this._keys[index] = key;
                this._values[index] = value;
                this._size++;
                if (this._size >= this._threshold) {
                    _rehash();
                }
                return NO_VALUE;
            } else if (k == key) {
                return this._values[index];
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public void putAll(final Map<? extends $Pk$, ? extends $Pv$> m) {
        // TODO
        //if (m instanceof $Ik$$Iv$Map) {
        //    final $Ik$$Iv$Map x = cast(m);
        //    final $pk$[] keys = x._keys;
        //    final $pv$[] values = x._values;
        //    for (int i = 0, len = keys.length; i < len; ++i) {
        //        if (keys[i] == NO_KEY) {
        //            continue;
        //        }
        //        xput(keys[i], values[i]);
        //    }
        //    if (x._haveNoValue) {
        //        this._noValue = x._noValue;
        //    }
        //} else
        if (m instanceof $Ik$$Iv$Map) {
            for (final $Ik$$Iv$Cursor entry : (($Ik$$Iv$Map)m)) {
                xput(entry.key(), entry.value());
            }
        } else {
            for (final Entry<? extends $Pk$, ? extends $Pv$> entry : m.entrySet()) {
                xput(entry.getKey().$pk$Value(), entry.getValue().$pv$Value());
            }
        }
    }

    @Override
    public $Pv$ remove(final Object _key) {
        if (!(_key instanceof $Pk$)) {
            return null;
        }
        final $pk$ key = ($pk$)_key;
        if (key == NO_KEY) {
            if (this._haveNoValue) {
                this._size--;
                this._haveNoValue = false;
                return this._noValue;
            } else {
                return null;
            }
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return null;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                _remove(index);
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ xremove(final $pk$ key) {
        if (key == NO_KEY) {
            if (this._haveNoValue) {
                this._size--;
                this._haveNoValue = false;
                return this._noValue;
            } else {
                return NO_VALUE;
            }
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return NO_VALUE;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                _remove(index);
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public boolean remove(final Object key, final Object value) {
        return key instanceof $Pk$ && value instanceof $Pv$ && xremove(($pk$) key, ($pv$) value);
    }

    @Override
    public boolean xremove(final $pk$ key, final $pv$ value) {
        if (key == NO_KEY) {
            if (this._haveNoValue && value == this._noValue) {
                this._size--;
                this._haveNoValue = false;
                return true;
            } else {
                return false;
            }
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return false;
            } else if (k == key) {
                if (value != this._values[index]) {
                    return false;
                }
                _remove(index);
                return true;
            }
            index = (index + 1) & this._mask;
        }
    }

    private boolean _removeKey(final $pk$ key) {
        if (key == NO_KEY) {
            if (this._haveNoValue) {
                this._size--;
                this._haveNoValue = false;
                return true;
            } else {
                return false;
            }
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return false;
            } else if (k == key) {
                _remove(index);
                return true;
            }
            index = (index + 1) & this._mask;
        }
    }

    private void _remove(int index) {
        this._size--;
        int next = (index + 1) & this._mask;
        for (;;) {
            final $pk$ key = this._keys[next];
            if (key == NO_KEY) {
                this._keys[index] = NO_KEY;
                return;
            }
            final int hash = _spread.spread($hc$);
            int slot = hash & this._mask;
            if (index <= next
                    ? index >= slot || slot > next
                    : index >= slot && slot > next) {
                this._keys[index] = key;
                this._values[index] = this._values[next];
                index = next;
            }
            next = (next + 1) & this._mask;
        }
    }

    @Override
    public boolean xremoveValue(final $pv$ value) {
        if (_haveNoValue && (value == NO_VALUE ? _noValue == NO_VALUE : value == _noValue)) {
            _haveNoValue = false;
            --_size;
            return true;
        }
        for (int i = 0; i < this._keys.length; i++) {
            final $pk$ k = this._keys[i];
            final $pv$ v = this._values[i];
            if (k != NO_KEY && (value == NO_VALUE ? v == NO_VALUE : value == v)) {
                _remove(i);
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean replace(final $Pk$ key, final $Pv$ oldValue, final $Pv$ newValue) {
        return xreplace(($pk$)key, ($pv$)oldValue, ($pv$)newValue);
    }

    @Override
    public boolean xreplace(final $pk$ key, final $pv$ oldValue, final $pv$ newValue) {
        if (key == NO_KEY) {
            if (!this._haveNoValue || this._noValue != oldValue) {
                return false;
            }
            this._noValue = newValue;
            this._haveNoValue = true;
            return true;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return false;
            } else if (k == key) {
                if (this._values[index] != oldValue) {
                    return false;
                }
                this._values[index] = newValue;
                return true;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $Pv$ replace(final $Pk$ _key, final $Pv$ _value) {
        final $pk$ key = _key;
        final $pv$ value = _value;
        if (key == NO_KEY) {
            if (!this._haveNoValue) {
                return null;
            }
            final $pv$ old = this._noValue;
            this._noValue = value;
            this._haveNoValue = true;
            return old;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return null;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                this._values[index] = value;
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public $pv$ xreplace(final $pk$ key, final $pv$ value) {
        if (key == NO_KEY) {
            if (!this._haveNoValue) {
                return NO_VALUE;
            }
            final $pv$ old = this._noValue;
            this._noValue = value;
            this._haveNoValue = true;
            return old;
        }
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                return NO_VALUE;
            } else if (k == key) {
                final $pv$ old = this._values[index];
                this._values[index] = value;
                return old;
            }
            index = (index + 1) & this._mask;
        }
    }

    @Override
    public void clear() {
        this._haveNoValue = false;
        this._size = 0;
        for (int i = 0, len = this._keys.length; i < len; i++) {
            this._keys[i] = NO_KEY;
        }
    }

    @Override
    public Set<$Pk$> keySet() {
        return new KeySet(this);
    }

    @Override
    public Collection<$Pv$> values() {
        return new ValueCol(this);
    }

    @Override
    public Set<Entry<$Pk$, $Pv$$X$ entrySet() {
        return new EntrySet(this);
    }

    @Override
    public $Ik$$Iv$Cursor iterator() {
        return new CursorIt(this);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null) return false;
        if (o instanceof $Ik$$Iv$HashMapF) {
            final $Ik$$Iv$HashMapF m = ($Ik$$Iv$HashMapF) o;
            if (_size != m.size()) return false;
            for (final $Ik$$Iv$Cursor e : this) {
                if (e.value() != m.xget(e.key())) return false;
            }
            return true;
        } else if (o instanceof Map) {
            final Map<?,?> m = (Map<?,?>) o;
            if (_size != m.size()) return false;
            for (final $Ik$$Iv$Cursor e : this) {
                final Object value = m.get(e.key());
                if (value == null || !value.equals(e.value())) return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int ret = 0;
        for (final $Ik$$Iv$Cursor e : this) {
            ret += e.hashCode();
        }
        return ret;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("{");
        boolean add = false;
        for (final $Ik$$Iv$Cursor e : this) {
            if (add) {
                sb.append(", ");
            }
            sb.append(e.key()).append("=").append(e.value());
            add = true;
        }
        return sb.append('}').toString();
    }

    private void _rehash() {
        final int cap = capacity(this._keys.length, this._factor, MAX_CAPACITY);
        final $pk$[] keys = this._keys;
        final $pv$[] values = this._values;
        this._threshold = (int)(cap * this._factor);
        this._mask = cap - 1;
        this._keys = new $pk$[cap];
        this._values = new $pv$[cap];
        for (int i = 0, len = keys.length; i < len; i++) {
            final $pk$ k = keys[i];
            if (k != NO_KEY) {
                _putNoResize(k, values[i]);
            }
        }
    }

    private void _putNoResize(final $pk$ key, final $pv$ value) {
        assert key != NO_KEY;
        final int hash = _spread.spread($hc$);
        int index = hash & this._mask;
        for (;;) {
            final $pk$ k = this._keys[index];
            if (k == NO_KEY) {
                this._keys[index] = key;
                this._values[index] = value;
                return;
            }
            assert k != key;
            index = (index + 1) & this._mask;
        }
    }

    private abstract static class _It<T> implements Iterator<T> {
        private static final $pk$ ILLEGAL = ($pk$)-1;
        private static final int INDEX_BEFORE = -1;
        private static final int INDEX_NO_VALUE = -2;
        private static final int INDEX_FINISHED = -3;

        final $Ik$$Iv$HashMapF map;
        private $pk$[] keys;
        private int index = INDEX_BEFORE;
        $pk$ key = ILLEGAL;
        int keyIndex = -1;
        private boolean found = false;

        private _It(final $Ik$$Iv$HashMapF map) {
            this.map = map;
            this.keys = map._keys;
        }

        private void _advance() {
            assert !found;
            assert index != INDEX_FINISHED;
            switch (index) {
                case INDEX_NO_VALUE:
                    index = INDEX_FINISHED;
                    found = true;
                    return;
                case INDEX_BEFORE:
                    index = 0;
                    break;
                default:
                    ++index;
                    break;
            }
            for (; index < keys.length; ++index) {
                if (keys[index] == NO_KEY) {
                    continue;
                }
                found = true;
                return;
            }
            index = map._haveNoValue ? INDEX_NO_VALUE : INDEX_FINISHED;
            found = true;
        }

        @Override
        public boolean hasNext() {
            if (!found) _advance();
            assert index != INDEX_BEFORE;
            return index != INDEX_FINISHED;
        }

        @Override
        public T next() {
            if (!found) _advance();
            assert index != INDEX_BEFORE;
            switch (index) {
                case INDEX_FINISHED:
                    throw new NoSuchElementException(); //TODO Message
                case INDEX_NO_VALUE:
                    assert map._haveNoValue;
                    key = NO_KEY;
                    break;
                default:
                    assert index > INDEX_BEFORE && index < keys.length;
                    key = keys[keyIndex = index];
            }
            found = false;
            return _get();
        }

        @Override
        public void remove() {
            if (key == ILLEGAL) {
                throw new IllegalStateException(); //TODO Message
            }
            if (key == NO_KEY) {
                assert map._haveNoValue;
                --map._size;
                map._haveNoValue = false;
            } else {
                assert keyIndex >= 0;
                assert this.keys[keyIndex] != NO_KEY;
                if (this.keys == map._keys) {
                    _removeAndCopy(keyIndex);
                } else {
                    map._removeKey(key);
                }
            }
            key = ILLEGAL;
        }

        private void _removeAndCopy(final int remove) {
            assert this.keys == map._keys;
            map._size--;
            int index = remove;
            int next = (index + 1) & map._mask;
            for (;;) {
                final $pk$ key = map._keys[next];
                if (key == NO_KEY) {
                    map._keys[index] = NO_KEY;
                    return;
                }
                final int hash = map._spread.spread($hc$);
                int slot = hash & map._mask;
                if (index <= next
                        ? index >= slot || slot > next
                        : index >= slot && slot > next) {
                    if (next < remove && index >= remove && this.keys == map._keys) {
                        map._keys[index] = NO_KEY;
                        this.keys = new $pk$[map._keys.length - remove];
                        System.arraycopy(map._keys, remove, this.keys, 0, this.keys.length);
                    }
                    map._keys[index] = key;
                    map._values[index] = map._values[next];
                    this.index = this.keys == map._keys ? remove : 0;
                    this.found = true;
                    index = next;
                }
                next = (next + 1) & map._mask;
            }
        }

        public void reset() {
            index = INDEX_BEFORE;
            found = false;
            key = ILLEGAL;
            keys = map._keys;
        }

        abstract T _get();
    }

    private static class CursorIt extends _It<$Ik$$Iv$Cursor> implements $Ik$$Iv$Cursor {

        private CursorIt(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        $Ik$$Iv$Cursor _get() {
            return cast(this);
        }

        @Override
        public $pk$ key() {
            return cast(key);
        }

        @Override
        public $pv$ value() {
            return key == NO_KEY ? map._noValue : map._values[keyIndex];
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || !(o instanceof $Ik$$Iv$Cursor)) return false;
            final $Ik$$Iv$Cursor c = ($Ik$$Iv$Cursor) o;

            final $pk$ key = key();
            final $pv$ value = value();
            final $pk$ ckey = c.key();
            final $pv$ cvalue = c.value();
            return (key == ckey) && (value == cvalue);
        }

        @Override
        public int hashCode() {
            final $pk$ key = key();
            final $pv$ value = value();
            return $Pk$.hashCode(key) ^ $Pv$.hashCode(value);
        }

        @Override
        public String toString() {
            final StringBuilder sb = new StringBuilder();
            sb.append(key()).append("=").append(value());
            return sb.toString();
        }

        @Override
        public Iterator<$Ik$$Iv$Cursor> iterator() {
            return this;
        }
    }

    private static class EntryIt extends _It<Entry<$Pk$,$Pv$$X$ {
        private EntryIt(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        Entry<$Pk$,$Pv$> _get() {
            return new En<>(map, key, key == NO_KEY ? map._noValue : map._values[keyIndex]);
        }
    }

    private static class KeyIt extends _It<$Pk$> {
        private KeyIt(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        $Pk$ _get() {
            return key;
        }
    }

    private static class ValueIt extends _It<$Pv$> {
        private ValueIt(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        $Pv$ _get() {
            return key == NO_KEY ? map._noValue : map._values[keyIndex];
        }
    }

    private abstract static class _Col<X> implements Collection<X> {
        final $Ik$$Iv$HashMapF map;

        private _Col(final $Ik$$Iv$HashMapF map) {
            this.map = map;
        }

        @Override
        public int size() {
            return map._size;
        }

        @Override
        public boolean isEmpty() {
            return map._size == 0;
        }

        @Override
        public boolean add(final X e) {
            throw new UnsupportedOperationException(); //TODO Message
        }

        @Override
        public boolean addAll(final Collection<? extends X> c) {
            throw new UnsupportedOperationException(); //TODO Message
        }

        @Override
        public boolean containsAll(final Collection<?> c) {
            for (final Object o : c) {
                if (!contains(o)) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public boolean removeAll(final Collection<?> c) {
            boolean ret = false;
            for (final Object o : c) {
                ret |= remove(o);
            }
            return ret;
        }

        @Override
        public boolean retainAll(final Collection<?> c) {
            if (c == null) throw new NullPointerException(); //TODO Message
            final Iterator<X> it = _Col.this.iterator();
            boolean ret = false;
            while (it.hasNext()) {
                if (!c.contains(it.next())) {
                    it.remove();
                    ret = true;
                }
            }
            return ret;
        }

        @Override
        public Object[] toArray() {
            final Object[] ret = new Object[map._size];
            int ri = 0;
            if (map._haveNoValue) {
                ret[ri++] = _get(NO_KEY);
            }
            for (int i = 0; i < map._keys.length; i++) {
                final $pk$ key = map._keys[i];
                if (key == NO_KEY) {
                    continue;
                }
                ret[ri++] = _get(key);
            }
            return ret;
        }

        @Override
        public <T> T[] toArray(final T[] a) {
            final T[] ret;
            if (a.length == map._size) {
                ret = a;
            } else if (a.length > map._size) {
                ret = a;
                a[map._size] = null;
            } else {
                ret = cast(Array.newInstance(a.getClass().getComponentType(), map._size));
            }
            int ri = 0;
            if (map._haveNoValue) {
                ret[ri++] = cast(_get(NO_KEY));
            }
            for (int i = 0; i < map._keys.length; i++) {
                final $pk$ key = map._keys[i];
                if (key == NO_KEY) {
                    continue;
                }
                ret[ri++] = cast(_get(key));
            }
            return ret;
        }

        abstract X _get(final $pk$ key);

        @Override
        public void clear() {
            map.clear();
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || !(o instanceof Collection)) return false;
            final Collection<?> c = (Collection<?>) o;
            return c.size() == size() && containsAll(c);
        }

        @Override
        public int hashCode() {
            int h = 0;
            for (final X x : _Col.this) {
                h += x.hashCode();
            }
            return h;
        }

        @Override
        public String toString() {
            final StringBuilder sb = new StringBuilder("[");
            boolean add = false;
            for (final X e : this) {
                if (add) {
                    sb.append(',');
                }
                sb.append(e);
                add = true;
            }
            return sb.append(']').toString();
        }
    }

    private static class KeySet extends _Col<$Pk$> implements Set<$Pk$> {

        private KeySet(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        public boolean contains(final Object o) {
            return o instanceof $Pk$ && map.xcontainsKey(($pk$)o);
        }

        @Override
        public Iterator<$Pk$> iterator() {
            return new KeyIt(map);
        }

        @Override
        public boolean remove(final Object o) {
            return o instanceof $Pk$ && map._removeKey(($pk$)o);
        }

        @Override
        $Pk$ _get(final $pk$ key) {
            return key;
        }

        @Override
        public boolean equals(final Object o) {
            return o instanceof Set && super.equals(o);
        }
    }

    private static class ValueCol extends _Col<$Pv$> {

        private ValueCol(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        $Pv$ _get(final $pk$ key) {
            return map.xget(key);
        }

        @Override
        public boolean contains(final Object o) {
            return o instanceof $Pv$ && map.xcontainsValue(($pv$)o);
        }

        @Override
        public Iterator<$Pv$> iterator() {
            return new ValueIt(map);
        }

        @Override
        public boolean remove(final Object o) {
            return o instanceof $Pv$ && map.xremoveValue(($pv$) o);
        }
    }

    private static class EntrySet extends _Col<Entry<$Pk$,$Pv$$X$ implements Set<Entry<$Pk$,$Pv$$X$ {

        private EntrySet(final $Ik$$Iv$HashMapF map) {
            super(map);
        }

        @Override
        public boolean contains(final Object o) {
            if (!(o instanceof Entry)) {
                return false;
            }
            final Entry<?,?> e = (Entry<?,?>)o;
            final Object ko = e.getKey();
            if (!(ko instanceof $Pk$)) return false;
            final $pk$ key = ($pk$)ko;
            if (!map.xcontainsKey(key)) return false;
            final $pv$ value = map.get(key);
            final Object evalue = e.getValue();
            return evalue != null && evalue.equals(value);
        }

        @Override
        public Iterator<Entry<$Pk$,$Pv$$X$ iterator() {
            return new EntryIt(map);
        }

        @Override
        Entry<$Pk$,$Pv$> _get(final $pk$ key) {
            return new En<>(map, key, map.xget(key));
        }

        @Override
        public boolean remove(final Object o) {
            if (!(o instanceof Entry)) {
                return false;
            }
            final Entry<?,?> e = (Entry<?,?>)o;
            return map.remove(e.getKey(), e.getValue());
        }

        @Override
        public boolean equals(final Object o) {
            return o instanceof Set && super.equals(o);
        }
    }
}
>>
